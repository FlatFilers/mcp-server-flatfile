// This file was generated. Do NOT edit this file.
import { z } from 'zod'

// Schema definitions - optimally ordered and using z.lazy() only for true circular dependencies
export const commons_AgentIdSchema = z.string().describe('Agent ID')

export const commons_AgentExportIdSchema = z.string().describe('Agent Export ID')

export const commons_AgentVersionIdSchema = z.string().describe('Agent version ID')

export const commons_AccountIdSchema = z.string().describe('Account ID')

export const commons_ActorIdSchema = z.string().describe('Actor ID')

export const commons_AppIdSchema = z.string().describe('App ID')

export const commons_AppAutobuildIdSchema = z.string().describe('App Autobuild ID')

export const commons_CalculationIdSchema = z.string().describe('Calculation ID')

export const commons_CanvasIdSchema = z.string().describe('Canvas ID')

export const commons_CanvasAreaIdSchema = z.string().describe('Canvas Area ID')

export const commons_ConstraintIdSchema = z.string().describe('Constraint ID')

export const commons_DataClipIdSchema = z.string().describe('Data Clip ID')

export const commons_DocumentIdSchema = z.string().describe('Document ID')

export const commons_GuestIdSchema = z.string().describe('Guest ID')

export const commons_EnvironmentIdSchema = z.string().describe('Environment ID')

export const commons_FileIdSchema = z.string().describe('File ID')

export const commons_SpaceIdSchema = z.string().describe('Space ID')

export const commons_WorkbookIdSchema = z.string().describe('Workbook ID')

export const commons_EventIdSchema = z.string().describe('Event ID')

export const commons_SheetIdSchema = z.string().describe('Sheet ID')

export const commons_SnapshotIdSchema = z.string().describe('Snapshot ID')

export const commons_CommitIdSchema = z.string().describe('Commit ID')

export const commons_VersionIdSchema = z.string().describe('Version ID')

export const commons_JobIdSchema = z.string().describe('Pipeline Job ID')

export const commons_UserIdSchema = z.string().describe('User ID')

export const commons_ActorRoleIdSchema = z.string().describe('Actor Role ID')

export const commons_ActorIdUnionSchema = z.union([commons_UserIdSchema, commons_AgentIdSchema, commons_GuestIdSchema])

export const commons_RoleIdSchema = z.string().describe('Role ID')

export const commons_SpaceConfigIdSchema = z.string().describe('Space Config ID')

export const commons_RecordIdSchema = z.string().describe('Record ID')

export const commons_SecretIdSchema = z.string().describe('Secret ID')

export const commons_FieldIdSchema = z.string().describe('Field ID')

export const commons_BillingSubscriptionIdSchema = z.string().describe('Billing Subscription ID')

export const commons_MappingIdSchema = z.string().describe('Mapping Rule ID')

export const commons_ProgramIdSchema = z.string().describe('Mapping Program ID')

export const commons_FamilyIdSchema = z.string().describe('Mapping Family ID')

export const commons_PromptIdSchema = z.string().describe('Prompt ID')

export const commons_ViewIdSchema = z.string().describe('View ID')

export const commons_ActionIdSchema = z.string().describe('Action ID')

export const commons_GuideIdSchema = z.string().describe('Guide ID')

export const commons_GuidanceIdSchema = z.string().describe('Guidance ID')

export const commons_DataRetentionPolicyIdSchema = z.string().describe('Data Retention Policy ID')

export const commons_RunbookIdSchema = z.string().describe('Runbook ID')

export const commons_RoutineIdSchema = z.string().describe('Routine ID')

export const commons_ThreadIdSchema = z.string().describe('Thread ID')

export const commons_MessageIdSchema = z.string().describe('Message ID')

export const commons_PaginationSchema = z.object({
  currentPage: z.number().int().describe('current page of results'),
  pageCount: z.number().int().describe('total number of pages of results'),
  totalCount: z.number().int().describe('total available results'),
})

export const commons_PageSizeSchema = z.number().int().describe('Number of logs to return in a page (default 20)')

export const commons_PageNumberSchema = z.number().int().describe('Based on pageSize, which page of records to return')

export const commons_StartSchema = z.string().describe('Start time for stats, defaults to 7 days ago')

export const commons_EndSchema = z.string().describe('End time for stats, defaults to now')

export const commons_SuccessQueryParameterSchema = z.boolean().describe('Boolean')

export const commons_GuideSchema = z.object({
  content: z.string().describe('Markdown guidance for this action'),
})

export const commons_GuardrailSchema = z.object({
  content: z.string().describe('Markdown guardrail for this action'),
})

export const commons_ActionModeSchema = z.enum(['foreground', 'background', 'toolbarBlocking'])

export const commons_ActionMessageTypeSchema = z.enum(['error', 'info'])

export const commons_ActionMessageSchema = z.object({
  type: commons_ActionMessageTypeSchema,
  content: z.string(),
})

export const commons_ActionScheduleSchema = z.enum(['weekly', 'daily', 'hourly'])

export const commons_InputFormTypeSchema = z.enum(['simple'])

export const commons_InputEnumPropertyOptionSchema = z.object({
  label: z.string().optional().describe('A visual label for this option, defaults to value if not provided'),
  description: z.string().optional().describe('A short description for this option'),
  color: z.string().optional().describe('An optional color to assign this option'),
  icon: z.string().optional().describe('A reference pointer to a previously registered icon'),
  meta: z
    .record(z.string(), z.unknown())
    .optional()
    .describe('An arbitrary JSON object to be associated with this option and made available to hooks'),
  value: z
    .unknown()
    .describe('The value or ID of this option. This value will be sent in egress. The type is a string | integer | '),
})

export const commons_InputConfigSchema = z.object({
  options: z.array(commons_InputEnumPropertyOptionSchema),
})

export const commons_InputConstraintTypeSchema = z.enum(['required'])

export const commons_InputConstraintSchema = z.object({
  type: commons_InputConstraintTypeSchema,
})

export const commons_InputFieldSchema = z.object({
  key: z.string().describe('Unique key for a Field.'),
  label: z.string().describe('Visible name of a Field.'),
  description: z.string().optional().describe('Brief description below the name of the Field.'),
  type: z.string().describe('Field Types inform the user interface how to sort and display data.'),
  defaultValue: z.unknown().optional().describe('Default value for a Field.'),
  config: commons_InputConfigSchema.optional().describe('Additional configuration for enum Fields.'),
  constraints: z
    .array(commons_InputConstraintSchema)
    .optional()
    .describe('Indicate additional validations that will be applied to the Field.'),
})

export const commons_InputFormSchema = z.object({
  type: commons_InputFormTypeSchema,
  fields: z.array(commons_InputFieldSchema),
})

export const commons_ActionConstraintHasAllValidSchema = z.object({
  ignoreSelection: z.boolean().optional(),
})

export const commons_ActionConstraintHasSelectionSchema = z.object({})

export const commons_ActionConstraintHasDataSchema = z.object({})

export const commons_ActionConstraintHasColumnEnabledSchema = z.object({})

export const commons_ActionConstraintSchema = z.union([
  commons_ActionConstraintHasAllValidSchema.extend({ type: z.literal('hasAllValid') }),
  commons_ActionConstraintHasSelectionSchema.extend({ type: z.literal('hasSelection') }),
  commons_ActionConstraintHasDataSchema.extend({ type: z.literal('hasData') }),
  commons_ActionConstraintHasColumnEnabledSchema.extend({ type: z.literal('hasColumnEnabled') }),
])

export const commons_ActionMountSheetSchema = z.object({
  slugs: z.array(z.string()).optional(),
})

export const commons_ActionMountWorkbookSchema = z.object({
  slugs: z.array(z.string()).optional(),
})

export const commons_ActionMountFieldSchema = z.object({
  keys: z.array(z.string()).optional(),
})

export const commons_ActionMountDocumentSchema = z.object({})

export const commons_ActionMountFileSchema = z.object({})

export const commons_ActionMountSchema = z.union([
  commons_ActionMountSheetSchema.extend({ type: z.literal('sheet') }),
  commons_ActionMountWorkbookSchema.extend({ type: z.literal('workbook') }),
  commons_ActionMountFieldSchema.extend({ type: z.literal('field') }),
  commons_ActionMountDocumentSchema.extend({ type: z.literal('document') }),
  commons_ActionMountFileSchema.extend({ type: z.literal('file') }),
])

export const commons_ActionWithoutLabelSchema = z.object({
  slug: z.string().optional().describe('**This is deprecated. Use `operation` instead.** '),
  operation: z.string().optional().describe('This will become the job operation that is triggered'),
  mode: commons_ActionModeSchema
    .optional()
    .describe('Foreground and toolbarBlocking action mode will prevent interacting with the resource until complete'),
  tooltip: z.string().optional().describe('A tooltip that appears when hovering the action button'),
  messages: z.array(commons_ActionMessageSchema).optional(),
  type: z.string().optional().describe('**This is deprecated.** '),
  description: z.string().optional().describe('The text that appears in the dialog after the action is clicked.'),
  schedule: commons_ActionScheduleSchema
    .optional()
    .describe('Determines if the action should happen on a regular cadence.'),
  primary: z
    .boolean()
    .optional()
    .describe('A primary action will be more visibly present, whether in Sheet or Workbook.'),
  confirm: z.boolean().optional().describe('Whether to show a modal to confirm the action'),
  icon: z
    .string()
    .optional()
    .describe('Icon will work on primary actions. It will only accept an already existing Flatfile design system ic'),
  requireAllValid: z.boolean().optional().describe('**This is deprecated. Use `constraints` instead.** '),
  requireSelection: z.boolean().optional().describe('**This is deprecated. Use `constraints` instead.** '),
  inputForm: commons_InputFormSchema.optional().describe('Adds an input form for this action after it is clicked.'),
  constraints: z
    .array(commons_ActionConstraintSchema)
    .optional()
    .describe('A limitation or restriction on the action.'),
  mount: commons_ActionMountSchema.optional(),
  guide: commons_GuideSchema.optional(),
  guardrail: commons_GuardrailSchema.optional(),
})

export const commons_ActionSchema = z
  .object({
    label: z.string().describe('The text on the Button itself'),
  })
  .merge(commons_ActionWithoutLabelSchema)

export const commons_APIActionSchema = z
  .object({
    id: commons_ActionIdSchema,
    targetId: z.string(),
    updatedAt: z.string(),
    createdAt: z.string(),
  })
  .merge(commons_ActionSchema)

export const commons_APIActionConfigSchema = z
  .object({
    targetId: z.string(),
  })
  .merge(commons_ActionSchema)

export const commons_ActionUpdateSchema = z
  .object({
    label: z.string().optional(),
  })
  .merge(commons_ActionWithoutLabelSchema)

export const commons_ActionConstraintTypeSchema = z.enum(['hasAllValid', 'hasSelection', 'hasData', 'hasColumnEnabled'])

export const commons_ResourceTypeSchema = z.enum([
  'account',
  'application',
  'document',
  'email',
  'environment',
  'event',
  'file',
  'guest',
  'job',
  'mapping_family',
  'mapping_program',
  'mapping_rule',
  'plan',
  'record',
  'commit',
  'sheet',
  'snapshot',
  'space_config',
  'space',
  'subscription',
  'user',
  'workbook',
  'agent',
  'agent_log',
  'field',
  'cell',
  'workbook_config',
  'api_key',
  'secret',
  'billing_subscription',
  'role',
  'actor_role',
  'permission',
  'data_retention_policy',
  'oauth_client',
  'oauth_grant',
  'oauth_code',
  'prompts',
])

export const commons_ActorTypeSchema = z.enum(['account', 'user', 'guest', 'agent', 'api_key', 'job'])

export const commons_SortDirectionSchema = z.enum(['asc', 'desc'])

export const commons_SuccessDataSchema = z.object({
  success: z.boolean(),
})

export const commons_SuccessSchema = z.object({
  data: commons_SuccessDataSchema.optional(),
})

export const commons_ErrorSchema = z.object({
  key: z.string().optional(),
  message: z.string(),
})

export const commons_ErrorsSchema = z.object({
  errors: z.array(commons_ErrorSchema),
})

export const commons_FilterSchema = z.enum(['valid', 'error', 'all', 'none'])

export const commons_FilterFieldSchema = z
  .string()
  .describe('Use this to narrow the valid/error filter results to a specific field')

export const commons_SearchFieldSchema = z
  .string()
  .describe('Use this to narrow the searchValue results to a specific field')

export const commons_SearchValueSchema = z
  .string()
  .describe('Search for the given value, returning matching rows. For exact matches, wrap the value in double quo')

export const commons_SortFieldSchema = z.string().describe('Name of field by which to sort records')

export const commons_AccessTokenSchema = z.object({
  accessToken: z.string(),
  expiresIn: z.string(),
  expires: z.string(),
  email: z.string().optional(),
  userId: commons_UserIdSchema.optional(),
  accountId: commons_AccountIdSchema.optional(),
})

export const commons_JSONPathStringSchema = z
  .string()
  .describe('A JSONPath string - https://www.rfc-editor.org/rfc/rfc9535')

export const property_StringConfigOptionsSchema = z.enum(['tiny', 'normal', 'medium', 'long'])

export const property_StringConfigSchema = z.object({
  size: property_StringConfigOptionsSchema,
})

export const property_UniqueConstraintConfigSchema = z.object({
  caseSensitive: z.boolean().optional().describe('Ignore casing when determining uniqueness'),
  ignoreEmpty: z.boolean().optional().describe('Do not flag empty values as duplicate'),
})

export const property_UniqueConstraintSchema = z.object({
  config: property_UniqueConstraintConfigSchema.optional(),
})

export const property_ExternalConstraintSchema = z.object({
  validator: z.string(),
  config: z.unknown().optional(),
})

export const property_StoredConstraintSchema = z.object({
  validator: z.string().describe('Must match the constraint validator name.'),
  version: z
    .number()
    .int()
    .optional()
    .describe('The version of the stored constraint to use. (Defaults to version 1.)'),
  description: z.string().optional().describe('A full description of what this constraint configuration does'),
  label: z
    .string()
    .optional()
    .describe('A short description of what this constraint constraint should do, example - values between 1 and 100'),
  config: z.unknown().optional(),
})

export const property_ConstraintSchema = z.union([
  z.object({ type: z.literal('required') }),
  property_UniqueConstraintSchema.extend({ type: z.literal('unique') }),
  z.object({ type: z.literal('computed') }),
  property_ExternalConstraintSchema.extend({ type: z.literal('external') }),
  property_StoredConstraintSchema.extend({ type: z.literal('stored') }),
])

export const property_FieldSizeSchema = z.enum(['xs', 's', 'm', 'l', 'xl'])

export const property_FieldAppearanceSchema = z.object({
  size: property_FieldSizeSchema.optional(),
})

export const property_BasePropertySchema = z.object({
  key: z.string(),
  label: z.string().optional().describe('User friendly field name'),
  description: z.string().optional().describe('A short description of the field. Markdown syntax is supported.'),
  constraints: z
    .array(property_ConstraintSchema)
    .optional()
    .describe('A list of constraints that should be applied to this field. This is limited to a maximum of 10 const'),
  readonly: z.boolean().optional(),
  appearance: property_FieldAppearanceSchema.optional(),
  actions: z
    .array(commons_ActionSchema)
    .optional()
    .describe('An array of actions that end users can perform on this Column.'),
  metadata: z
    .unknown()
    .optional()
    .describe('Useful for any contextual metadata regarding the schema. Store any valid json here.'),
  treatments: z.array(z.string()).optional().describe('A unique presentation for a field in the UI.'),
  alternativeNames: z.array(z.string()).optional(),
})

export const property_StringPropertySchema = z
  .object({
    config: property_StringConfigSchema.optional(),
  })
  .merge(property_BasePropertySchema)

export const property_NumberConfigSchema = z.object({
  decimalPlaces: z.number().int().optional().describe('Number of decimal places to round data to'),
})

export const property_ArrayablePropertySchema = z.object({
  isArray: z.boolean().optional().describe('Will allow multiple values and store as an array'),
})

export const property_NumberPropertySchema = z
  .object({
    config: property_NumberConfigSchema.optional(),
  })
  .merge(property_BasePropertySchema)
  .merge(property_ArrayablePropertySchema)

export const property_BooleanPropertyConfigSchema = z.object({
  allowIndeterminate: z.boolean().describe('Allow a neither true or false state to be stored as `null`'),
})

export const property_BooleanPropertySchema = z
  .object({
    config: property_BooleanPropertyConfigSchema.optional(),
  })
  .merge(property_BasePropertySchema)

export const property_DatePropertySchema = z.object({}).merge(property_BasePropertySchema)

export const property_EnumPropertyOptionSchema = z.object({
  label: z.string().optional().describe('A visual label for this option'),
  description: z.string().optional().describe('A short description for this option'),
  color: z.string().optional().describe('An optional color to assign this option'),
  icon: z.string().optional().describe('A reference pointer to a previously registered icon'),
  meta: z
    .record(z.string(), z.unknown())
    .optional()
    .describe('An arbitrary JSON object to be associated with this option and made available to hooks'),
  value: z
    .unknown()
    .describe('The value or ID of this option. This value will be sent in egress. The type is a string | integer | '),
  alternativeNames: z.array(z.string()).optional().describe('Alternative names to match this enum option to'),
  ordinal: z
    .number()
    .int()
    .optional()
    .describe('The order of this option in the list. SortBy must be set to `ordinal` to use this.'),
})

export const property_EnumPropertySortBySchema = z.enum(['label', 'value', 'ordinal'])

export const property_EnumPropertyConfigSchema = z.object({
  allowCustom: z.boolean().optional().describe('Permit the user to create new options for this specific field.'),
  options: z.array(property_EnumPropertyOptionSchema),
  sortBy: property_EnumPropertySortBySchema
    .optional()
    .describe('Sort the options by the value of this property. Defaults to `label`.'),
})

export const property_EnumPropertySchema = z
  .object({
    multi: z
      .boolean()
      .optional()
      .describe('Will allow multiple values and store / provide the values in an array if set. Not all field types su'),
    config: property_EnumPropertyConfigSchema,
  })
  .merge(property_BasePropertySchema)
  .merge(property_ArrayablePropertySchema)

export const property_ReferencePropertyRelationshipSchema = z.enum(['has-one', 'has-many'])

export const property_ReferencePropertyConfigSchema = z.object({
  ref: z.string().describe('Full path reference to a sheet configuration. Must be in the same workbook.'),
  key: z.string().describe('Key of the property to use as the reference key. Defaults to `id`'),
  relationship: property_ReferencePropertyRelationshipSchema
    .optional()
    .describe('The type of relationship this defines'),
})

export const property_ReferencePropertySchema = z
  .object({
    config: property_ReferencePropertyConfigSchema,
  })
  .merge(property_BasePropertySchema)
  .merge(property_ArrayablePropertySchema)

export const property_ReferenceListPropertyConfigSchema = z.object({
  ref: z.string().describe('Full path reference to a sheet configuration. Must be in the same workbook.'),
  key: z.string().describe('Key of the property to use as the reference key. Defaults to `id`'),
})

export const property_ReferenceListPropertySchema = z
  .object({
    config: property_ReferenceListPropertyConfigSchema,
  })
  .merge(property_BasePropertySchema)
  .merge(property_ArrayablePropertySchema)

export const property_StringListPropertySchema = z.object({}).merge(property_BasePropertySchema)

export const property_EnumListPropertySchema = z
  .object({
    config: property_EnumPropertyConfigSchema,
  })
  .merge(property_BasePropertySchema)

export const property_PropertySchema = z.union([
  property_StringPropertySchema.extend({ type: z.literal('string') }),
  property_NumberPropertySchema.extend({ type: z.literal('number') }),
  property_BooleanPropertySchema.extend({ type: z.literal('boolean') }),
  property_DatePropertySchema.extend({ type: z.literal('date') }),
  property_EnumPropertySchema.extend({ type: z.literal('enum') }),
  property_ReferencePropertySchema.extend({ type: z.literal('reference') }),
  property_ReferenceListPropertySchema,
  property_StringListPropertySchema,
  property_EnumListPropertySchema,
])

export const versions_VersionSchema = z.object({
  versionId: commons_VersionIdSchema,
})

export const versions_VersionResponseSchema = z.object({
  data: versions_VersionSchema,
})

export const snapshots_SummarySectionSchema = z.object({
  total: z.number().int(),
  byField: z.record(z.string(), z.number().int()).optional(),
})

export const snapshots_SchemaDiffEnumSchema = z.enum(['added', 'removed', 'unchanged'])

export const snapshots_SchemaDiffDataSchema = z.record(z.string(), snapshots_SchemaDiffEnumSchema)

export const snapshots_SchemaDiffRecordSchema = snapshots_SchemaDiffDataSchema

export const sheets_SheetAccessSchema = z.enum(['*', 'add', 'edit', 'delete', 'import'])

export const sheets_CompositeUniqueConstraintStrategySchema = z.enum(['hash', 'concat'])

export const sheets_CompositeUniqueConstraintSchema = z.object({
  name: z.string().describe('The name of the constraint'),
  fields: z.array(z.string()).describe('The fields that must be unique together'),
  requiredFields: z
    .array(z.string())
    .optional()
    .describe('Fields that, when empty, will cause this unique constraint to be ignored'),
  strategy: sheets_CompositeUniqueConstraintStrategySchema,
})

export const sheets_ExternalSheetConstraintSchema = z.object({
  validator: z.string(),
  fields: z.array(z.string()).optional().describe('The fields that must be unique together'),
  config: z.unknown().optional(),
})

export const sheets_SheetConstraintSchema = z.union([
  sheets_CompositeUniqueConstraintSchema.extend({ type: z.literal('unique') }),
  sheets_ExternalSheetConstraintSchema.extend({ type: z.literal('external') }),
])

export const sheets_SheetConfigSchema = z.object({
  name: z.string().describe('The name of your Sheet as it will appear to your end users.'),
  description: z.string().optional().describe('A sentence or two describing the purpose of your Sheet.'),
  slug: z.string().optional().describe('A unique identifier for your Sheet.'),
  readonly: z
    .boolean()
    .optional()
    .describe('A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by en'),
  allowAdditionalFields: z.boolean().optional().describe('Allow end users to add fields during mapping.'),
  mappingConfidenceThreshold: z
    .number()
    .finite()
    .optional()
    .describe('The minimum confidence required to automatically map a field'),
  access: z.array(sheets_SheetAccessSchema).optional().describe('Control Sheet-level access for all users.'),
  fields: z.array(property_PropertySchema).describe("Where you define your Sheet's data schema."),
  actions: z
    .array(commons_ActionSchema)
    .optional()
    .describe('An array of actions that end users can perform on this Sheet.'),
  metadata: z
    .unknown()
    .optional()
    .describe('Useful for any contextual metadata regarding the schema. Store any valid json'),
  constraints: z
    .array(sheets_SheetConstraintSchema)
    .optional()
    .describe('An array of constraints that end users can perform on this Sheet.'),
})

export const snapshots_SnapshotSummarySchema = z.object({
  createdSince: snapshots_SummarySectionSchema,
  updatedSince: snapshots_SummarySectionSchema,
  deletedSince: snapshots_SummarySectionSchema,
  schemaDiff: snapshots_SchemaDiffRecordSchema.describe(
    'The schema diff between the snapshot and the current sheet schema.',
  ),
  config: sheets_SheetConfigSchema.describe('The sheet configuration at the time of the snapshot.'),
})

export const snapshots_SnapshotSchema = z.object({
  id: commons_SnapshotIdSchema.describe('The ID of the Snapshot.'),
  sheetId: commons_SheetIdSchema.describe('The ID of the Sheet.'),
  label: z.string().optional().describe('The title of the Snapshot.'),
  threadId: z.string().optional().describe('The ID of the thread associated with the snapshot.'),
  summary: snapshots_SnapshotSummarySchema
    .optional()
    .describe('A summary of the Snapshot. This field is only available on the single get snapshot endpoint. It is n'),
  createdAt: z.string().describe('The time the Snapshot was created.'),
  createdBy: commons_UserIdSchema.describe('The actor who created the Snapshot.'),
})

export const snapshots_SnapshotResponseSchema = z.object({
  data: snapshots_SnapshotSchema,
})

export const snapshots_SnapshotsResponseSchema = z.object({
  data: z.array(snapshots_SnapshotSchema),
})

export const snapshots_RestoreOptionsSchema = z.object({
  created: z.boolean(),
  updated: z.boolean(),
  deleted: z.boolean(),
})

export const snapshots_ChangeTypeSchema = z.enum(['createdSince', 'updatedSince', 'deletedSince'])

export const dataClips_SharedLinkAccessSchema = z.enum(['Public', 'Restricted'])

export const dataClips_CreateDataClipRequestSchema = z.object({
  name: z.string().describe('The name of the DataClip.'),
  description: z.string().optional().describe('A description of the DataClip.'),
  sourceSheetId: commons_SheetIdSchema.describe('The ID of the source sheet.'),
  collaborators: z.array(z.string()).optional().describe('The list of collaborators.'),
  sharedLinkAccess: dataClips_SharedLinkAccessSchema
    .optional()
    .describe('The type of shared link to generate for the DataClip.'),
})

export const dataClips_AddRecordsToClipRequestSchema = z.object({
  recordIds: z.array(commons_RecordIdSchema),
})

export const dataClips_UpdateDataClipRequestSchema = z.object({
  name: z.string().describe('The name of the DataClip.'),
  description: z.string().optional().describe('A description of the DataClip.'),
  status: z.string().optional().describe('The status of the DataClip.'),
  collaborators: z.array(z.string()).optional().describe('The list of collaborators.'),
  sharedLinkAccess: dataClips_SharedLinkAccessSchema
    .optional()
    .describe('The type of shared link to generate for the DataClip.'),
})

export const dataClips_DataClipSchema = z.object({
  id: commons_DataClipIdSchema,
  name: z.string().describe('The name of the DataClip.'),
  description: z.string().optional().describe('A description of the DataClip.'),
  sourceSheetId: commons_SheetIdSchema.describe('The ID of the source sheet.'),
  clipSheetId: commons_SheetIdSchema.describe('The ID of the sheet that is clipped from source sheet.'),
  workbookId: z.string().describe('The ID of the workbook.'),
  status: z.string().describe('The status of the DataClip.'),
  createdBy: z.string().describe('The user who created the DataClip.'),
  mergedAt: z.string().optional().describe('The date when the DataClip was merged.'),
  deletedAt: z.string().optional().describe('The date when the DataClip was deleted.'),
  updatedAt: z.string().describe('The date when the DataClip was updated.'),
  createdAt: z.string().describe('The date when the DataClip was created.'),
  guestLinkUrl: z.string().optional().describe('A URL for guests to access the DataClip.'),
  accessToken: z.string().optional().describe('A signed token associated with the guest link.'),
  sharedLinkAccess: z.string().optional().describe('Indicates the shared link access level, Public or Restricted'),
})

export const dataClips_DataClipResponseSchema = z.object({
  data: dataClips_DataClipSchema.describe('The list of DataClips.'),
})

export const dataClips_ListDataClipResponseSchema = z.object({
  data: z.array(dataClips_DataClipResponseSchema),
})

export const dataClips_ResolutionSummaryConflictsSchema = z
  .object({
    totalRemovedFromMain: z
      .number()
      .int()
      .describe('The total number of records that have been removed from the main sheet but have changes in the clip.'),
  })
  .merge(snapshots_SummarySectionSchema)

export const dataClips_ResolutionSummarySchema = z.object({
  total: z.number().int(),
  conflicts: dataClips_ResolutionSummaryConflictsSchema,
  markedForDeletion: z.number().int(),
  schemaDiff: snapshots_SchemaDiffRecordSchema.describe(
    'The schema diff between the clip and the source sheet schema.',
  ),
  config: sheets_SheetConfigSchema.describe('The sheet configuration at the time of the snapshot.'),
})

export const dataClips_ResolveTypeSchema = z.enum(['conflict', 'resolve'])

export const dataClips_ResolveToSchema = z.enum(['clip', 'main', 'snapshot'])

export const dataClips_RemovedFromMainResolutionSchema = z.enum(['ignore', 'restore'])

export const dataClips_ResolveSchema = z.object({
  field: z.string().optional(),
  type: dataClips_ResolveTypeSchema.optional(),
  resolveTo: dataClips_ResolveToSchema.optional(),
  clip_value_reference: z.string().optional(),
  main_value_reference: z.string().optional(),
  removedFromMainResolution: dataClips_RemovedFromMainResolutionSchema.optional(),
})

export const dataClips_ResolvedRecordsSchema = z.object({
  recordId: commons_RecordIdSchema.describe('The record ID to update'),
  resolves: z.array(dataClips_ResolveSchema).describe('The resolutions for the record'),
})

export const dataClips_UpdateResolutionRequestSchema = z.object({
  resolvedRecords: z.array(dataClips_ResolvedRecordsSchema).describe('Array of record-specific resolutions to update'),
})

export const dataClips_GetResolutionIndexResponseSchema = z.object({
  index: z.number().int().describe('Zero-based index of the record in the filtered list'),
})

export const records_ValidationTypeSchema = z.enum(['error', 'warn', 'info'])

export const records_ValidationSourceSchema = z.enum([
  'required-constraint',
  'unique-constraint',
  'custom-logic',
  'unlinked',
  'invalid-option',
  'is-artifact',
])

export const records_ValidationMessageSchema = z.object({
  field: z.string().optional(),
  type: records_ValidationTypeSchema.optional(),
  source: records_ValidationSourceSchema.optional(),
  message: z.string().optional(),
  path: commons_JSONPathStringSchema.optional().describe('This JSONPath is based on the root of mapped cell object.'),
})

export const records_CellValueUnionSchema = z.union([
  z.string(),
  z.number().int(),
  z.number().int(),
  z.number().finite(),
  z.boolean(),
  z.string(),
  z.string(),
  z.array(z.string()),
])

export const records_CellValueSchema = z.object({
  valid: z.boolean().optional(),
  messages: z.array(records_ValidationMessageSchema).optional(),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Deprecated, use record level metadata instead.'),
  value: records_CellValueUnionSchema.optional(),
  layer: z.string().optional(),
  updatedAt: z.string().optional(),
})

export const records_RecordDataSchema = z
  .record(z.string(), records_CellValueSchema)
  .describe('A single row of data in a Sheet')

export const records_CellConfigSchema = z.object({
  readonly: z.boolean().optional(),
})

export const records_RecordConfigSchema = z.object({
  readonly: z.boolean().optional(),
  fields: z.record(z.string(), records_CellConfigSchema).optional(),
  markedForDeletion: z.boolean().optional(),
})

export const records_RecordBaseSchema = z.object({
  id: commons_RecordIdSchema,
  versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead.'),
  commitId: commons_CommitIdSchema.optional(),
  valid: z
    .boolean()
    .optional()
    .describe('Auto-generated value based on whether the record contains a field with an error message. Cannot be s'),
  messages: z
    .array(records_ValidationMessageSchema)
    .optional()
    .describe('This record level `messages` property is deprecated and no longer stored or used. Use the `messages`'),
  metadata: z.record(z.string(), z.unknown()).optional(),
  config: records_RecordConfigSchema.optional(),
})

export const records_RecordSchema = z
  .object({
    values: records_RecordDataSchema,
  })
  .merge(records_RecordBaseSchema)

export const records_RecordsSchema = z.array(records_RecordSchema).describe('List of Record objects')

export const records_CellValueWithLinksSchema = z
  .object({
    links: records_RecordsSchema.optional(),
  })
  .merge(records_CellValueSchema)

export const records_RecordDataWithLinksSchema = z
  .record(z.string(), records_CellValueWithLinksSchema)
  .describe('A single row of data in a Sheet, including links to related rows')

export const records_RecordWithLinksSchema = z.object({
  id: commons_RecordIdSchema,
  values: records_RecordDataWithLinksSchema,
  valid: z.boolean().optional(),
  messages: z.array(records_ValidationMessageSchema).optional(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  config: records_RecordConfigSchema.optional(),
})

export const records_RecordsWithLinksSchema = z
  .array(records_RecordWithLinksSchema)
  .describe('List of Record objects, including links to related rows')

export const records_FieldRecordCountsSchema = z.object({
  total: z.number().int(),
  valid: z.number().int(),
  error: z.number().int(),
  empty: z.number().int(),
})

export const records_RecordCountsSchema = z.object({
  total: z.number().int(),
  valid: z.number().int(),
  error: z.number().int(),
  errorsByField: z.record(z.string(), z.number().int()).optional(),
  byField: z
    .record(z.string(), records_FieldRecordCountsSchema)
    .optional()
    .describe('Counts for valid, error, and total records grouped by field key'),
})

export const records_RecordsResponseDataSchema = z
  .object({
    records: records_RecordsWithLinksSchema.optional(),
    counts: records_RecordCountsSchema.optional(),
    versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead.'),
    commitId: commons_CommitIdSchema.optional(),
  })
  .merge(commons_SuccessDataSchema)

export const records_RecordsResponseSchema = z.object({
  data: records_RecordsResponseDataSchema,
})

export const records_GetRecordsResponseDataSchema = z
  .object({
    records: records_RecordsWithLinksSchema,
    counts: records_RecordCountsSchema.optional(),
    versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead.'),
    commitId: commons_CommitIdSchema.optional(),
  })
  .merge(commons_SuccessDataSchema)

export const records_GetRecordsResponseSchema = z.object({
  data: records_GetRecordsResponseDataSchema,
})

export const records_RecordIndicesSchema = z.object({
  id: z.string(),
  index: z.number().int(),
})

export const records_GetRecordIndicesResponseSchema = z.array(records_RecordIndicesSchema)

export const records_DiffValueSchema = z
  .object({
    snapshotValue: records_CellValueUnionSchema.optional(),
    clipValue: records_CellValueUnionSchema.optional(),
    warning: z.boolean().optional(),
    warnings: z.array(z.string()).optional(),
  })
  .merge(records_CellValueSchema)

export const records_DiffDataSchema = z.record(z.string(), records_DiffValueSchema)

export const records_DiffRecordSchema = z
  .object({
    values: records_DiffDataSchema,
    resolves: z.array(dataClips_ResolveSchema).optional(),
  })
  .merge(records_RecordBaseSchema)

export const records_DiffRecordsSchema = z.array(records_DiffRecordSchema).describe('List of DiffRecord objects')

export const records_DiffRecordsResponseSchema = z.object({
  data: records_DiffRecordsSchema,
})

export const sheets_SheetSchema = z.object({
  id: commons_SheetIdSchema.describe('The ID of the Sheet.'),
  workbookId: commons_WorkbookIdSchema.describe('The ID of the Workbook.'),
  name: z.string().describe('The name of the Sheet.'),
  slug: z.string().describe('The slug of the Sheet.'),
  config: sheets_SheetConfigSchema.describe('Describes shape of data as well as behavior'),
  metadata: z
    .unknown()
    .optional()
    .describe('Useful for any contextual metadata regarding the sheet. Store any valid json'),
  namespace: z.string().optional().describe('The scoped namespace of the Sheet.'),
  lockedBy: z.string().optional().describe('The actor who locked the Sheet.'),
  updatedAt: z.string().describe('Date the sheet was last updated'),
  createdAt: z.string().describe('Date the sheet was created'),
  lockedAt: z.string().optional().describe('The time the Sheet was locked.'),
  recordCounts: records_RecordCountsSchema
    .optional()
    .describe('The precomputed counts of records in the Sheet (may not exist).'),
})

export const sheets_ListSheetsResponseSchema = z.object({
  data: z.array(sheets_SheetSchema),
})

export const sheets_SheetResponseSchema = z.object({
  data: sheets_SheetSchema,
})

export const sheets_SheetConfigUpdateSchema = z.object({
  name: z.string().optional().describe('The name of your Sheet as it will appear to your end users.'),
  description: z.string().optional().describe('A sentence or two describing the purpose of your Sheet.'),
  slug: z.string().optional().describe('A unique identifier for your Sheet. **Required when updating a Workbook.**'),
  readonly: z
    .boolean()
    .optional()
    .describe('A boolean specifying whether or not this sheet is read only. Read only sheets are not editable by en'),
  allowAdditionalFields: z.boolean().optional().describe('Allow end users to add fields during mapping.'),
  mappingConfidenceThreshold: z
    .number()
    .finite()
    .optional()
    .describe('The minimum confidence required to automatically map a field'),
  access: z.array(sheets_SheetAccessSchema).optional().describe('Control Sheet-level access for all users.'),
  fields: z.array(property_PropertySchema).optional().describe("Where you define your Sheet's data schema."),
  actions: z
    .array(commons_ActionSchema)
    .optional()
    .describe('An array of actions that end users can perform on this Sheet.'),
})

export const sheets_SheetUpdateSchema = z.object({
  id: commons_SheetIdSchema.optional().describe('The ID of the Sheet.'),
  workbookId: commons_WorkbookIdSchema.optional().describe('The ID of the Workbook.'),
  config: sheets_SheetConfigSchema.optional().describe('Describes shape of data as well as behavior.'),
  metadata: z
    .unknown()
    .optional()
    .describe('Useful for any contextual metadata regarding the sheet. Store any valid json'),
  namespace: z.string().optional().describe('The scoped namespace of the Sheet.'),
  updatedAt: z.string().optional().describe('Date the sheet was last updated'),
  createdAt: z.string().optional().describe('Date the sheet was created'),
})

export const sheets_SheetUpdateRequestSchema = z.object({
  name: z.string().optional().describe('The name of the Sheet.'),
  slug: z.string().optional().describe('The slug of the Sheet.'),
  metadata: z
    .unknown()
    .optional()
    .describe('Useful for any contextual metadata regarding the sheet. Store any valid json'),
})

export const sheets_SheetConfigOrUpdateSchema = z
  .object({})
  .merge(sheets_SheetConfigUpdateSchema)
  .merge(sheets_SheetUpdateSchema)

export const sheets_RecordCountsResponseDataSchema = z.object({
  counts: records_RecordCountsSchema,
  success: z.boolean(),
})

export const sheets_RecordCountsResponseSchema = z.object({
  data: sheets_RecordCountsResponseDataSchema,
})

export const sheets_FieldConfigResponseSchema = z.object({
  data: property_PropertySchema,
})

export const sheets_CellValueWithCountsSchema = z
  .object({
    counts: records_RecordCountsSchema.optional(),
  })
  .merge(records_CellValueSchema)

export const sheets_CellsResponseDataSchema = z
  .record(z.string(), z.array(sheets_CellValueWithCountsSchema))
  .describe('Cell values grouped by field key')

export const sheets_CellsResponseSchema = z.object({
  data: sheets_CellsResponseDataSchema,
})

export const sheets_FieldKeySchema = z
  .string()
  .describe('Returns results from the given field only. Otherwise all field cells are returned')

export const sheets_DistinctSchema = z.boolean().describe('When true, excludes duplicate values')

export const sheets_IncludeCountsSchema = z
  .boolean()
  .describe('When both distinct and includeCounts are true, the count of distinct field values will be returned')

export const sheets_CalculationTypeSchema = z.enum([
  'COUNT_EMPTY',
  'COUNT_NON_EMPTY',
  'PERCENT_EMPTY',
  'PERCENT_NON_EMPTY',
  'COUNT_CHANGED',
  'PERCENT_CHANGED',
])

export const sheets_CalculationSchema = z.object({
  id: commons_CalculationIdSchema.describe('Unique identifier for the calculation'),
  workbookId: commons_WorkbookIdSchema.describe('ID of the workbook this calculation belongs to'),
  sheetId: commons_SheetIdSchema.describe('ID of the sheet this calculation belongs to'),
  fieldKey: z.string().describe('Field key this calculation is performed on'),
  type: sheets_CalculationTypeSchema.describe('Type of calculation being performed'),
  value: z.number().finite().optional().describe('Result of the calculation'),
})

export const sheets_CalculationResponseSchema = z.object({
  data: sheets_CalculationSchema,
})

export const sheets_ListCalculationsResponseSchema = z.object({
  data: z.array(sheets_CalculationSchema),
})

export const commits_CommitSchema = z.object({
  id: commons_CommitIdSchema,
  sheetId: commons_SheetIdSchema,
  createdBy: z.string().describe('The actor (user or system) who created the commit'),
  completedBy: z.string().optional().describe('The actor (user or system) who completed the commit'),
  createdAt: z.string().describe('The time the commit was created'),
  completedAt: z.string().optional().describe('The time the commit was acknowledged'),
})

export const commits_ListCommitsResponseSchema = z.object({
  data: z.array(commits_CommitSchema),
})

export const commits_CommitResponseSchema = z.object({
  data: commits_CommitSchema,
})

export const workbooks_WorkbookConfigSettingsSchema = z.object({
  trackChanges: z
    .boolean()
    .optional()
    .describe('Whether to track changes for this workbook. Defaults to false. Tracking changes on a workbook allows'),
  noMappingRedirect: z
    .boolean()
    .optional()
    .describe('When noMappingRedirect is set to true, dragging a file into a sheet will not redirect to the mapping'),
  sheetSidebarOrder: z
    .array(commons_SheetIdSchema)
    .optional()
    .describe('Used to set the order of sheets in the sidebar. Sheets that are not specified will be shown after th'),
})

export const workbooks_WorkbookTreatmentsSchema = z.enum(['EXTRACTED_FROM_SOURCE', 'SMALL_DATA'])

export const workbooks_WorkbookSchema = z.object({
  id: commons_WorkbookIdSchema.describe('ID of the Workbook.'),
  name: z.string().optional().describe('Name of the Workbook.'),
  spaceId: commons_SpaceIdSchema.describe('Associated Space ID of the Workbook.'),
  environmentId: commons_EnvironmentIdSchema.describe('Associated Environment ID of the Workbook.'),
  sheets: z.array(sheets_SheetSchema).optional().describe('A list of Sheets associated with the Workbook.'),
  labels: z.array(z.string()).optional().describe('A list of labels for the Workbook.'),
  actions: z.array(commons_ActionSchema).optional().describe('A list of Actions associated with the Workbook.'),
  settings: workbooks_WorkbookConfigSettingsSchema.optional().describe('The Workbook settings.'),
  metadata: z.unknown().optional().describe('Metadata for the workbook'),
  treatments: z.array(workbooks_WorkbookTreatmentsSchema).optional().describe('Treatments for the workbook'),
  namespace: z.string().optional(),
  updatedAt: z.string().describe('Date the workbook was last updated'),
  createdAt: z.string().describe('Date the workbook was created'),
  expiredAt: z.string().optional().describe('Date the workbook was created'),
  storageType: z.string().optional().describe('The storage type of the workbook'),
})

export const workbooks_ListWorkbooksResponseSchema = z.object({
  data: z.array(workbooks_WorkbookSchema),
})

export const workbooks_WorkbookResponseSchema = z.object({
  data: workbooks_WorkbookSchema,
})

export const workbooks_CreateWorkbookConfigSchema = z.object({
  name: z.string().describe('The name of the Workbook.'),
  labels: z.array(z.string()).optional().describe('An optional list of labels for the Workbook.'),
  spaceId: commons_SpaceIdSchema.optional().describe('Space to associate with the Workbook.'),
  environmentId: commons_EnvironmentIdSchema.optional().describe('Environment to associate with the Workbook'),
  namespace: z.string().optional().describe('Optional namespace to apply to the Workbook.'),
  sheets: z.array(sheets_SheetConfigSchema).optional().describe('Sheets to create on the Workbook.'),
  actions: z.array(commons_ActionSchema).optional().describe('Actions to create on the Workbook.'),
  settings: workbooks_WorkbookConfigSettingsSchema.optional().describe('The Workbook settings.'),
  metadata: z.unknown().optional().describe('Metadata for the workbook'),
  treatments: z.array(workbooks_WorkbookTreatmentsSchema).optional().describe('Treatments for the workbook'),
})

export const workbooks_WorkbookUpdateSchema = z.object({
  name: z.string().optional().describe('The name of the Workbook.'),
  labels: z.array(z.string()).optional().describe('An optional list of labels for the Workbook.'),
  spaceId: commons_SpaceIdSchema.optional().describe('The Space Id associated with the Workbook.'),
  environmentId: commons_EnvironmentIdSchema.optional().describe('The Environment Id associated with the Workbook.'),
  namespace: z.string().optional().describe('The namespace of the Workbook.'),
  sheets: z.array(sheets_SheetConfigOrUpdateSchema).optional().describe('Describes shape of data as well as behavior'),
  actions: z.array(commons_ActionSchema).optional(),
  metadata: z.unknown().optional().describe('Metadata for the workbook'),
  settings: workbooks_WorkbookConfigSettingsSchema.optional().describe('The Workbook settings.'),
})

export const runbooks_SheetTransformConfigSchema = z.object({
  sourceSheetIds: z.array(z.string()).describe('The ids of the sourceSheets to transform'),
  destinationSheetIds: z.array(z.string()).describe('The id of the destinationSheet to transform'),
})

export const runbooks_RunbookConfigSchema = runbooks_SheetTransformConfigSchema

export const runbooks_RunbookStatusSchema = z.enum([
  'CREATED',
  'RECORDING',
  'EXECUTING',
  'WAITING',
  'COMPLETED',
  'FAILED',
  'CANCELED',
])

export const runbooks_RunbookTypeSchema = z.enum(['SHEET_TOOL', 'PREPROCESSING'])

export const runbooks_RunbookSchema = z.object({
  id: commons_RunbookIdSchema.describe('The ID of the Runbook.'),
  accountId: commons_AccountIdSchema,
  appId: commons_AppIdSchema,
  environmentId: commons_EnvironmentIdSchema,
  spaceId: commons_SpaceIdSchema,
  name: z.string().describe('The name of the Runbook.'),
  config: runbooks_RunbookConfigSchema.describe('The configuration of the Runbook.'),
  status: runbooks_RunbookStatusSchema.describe('The status of the Runbook.'),
  type: runbooks_RunbookTypeSchema.describe('The type of the Runbook.'),
  createdBy: z.string().describe('The entity which created the Runbook.'),
  createdAt: z.string().describe('Date the sheet was created'),
  updatedAt: z.string().describe('Date the sheet was last updated'),
})

export const runbooks_RunbooksResponseSchema = z.object({
  data: z.array(runbooks_RunbookSchema),
})

export const runbooks_RunbookResponseSchema = z.object({
  data: runbooks_RunbookSchema,
})

export const runbooks_CreateRunbookRequestSchema = z.object({
  accountId: commons_AccountIdSchema,
  appId: commons_AppIdSchema,
  environmentId: commons_EnvironmentIdSchema,
  spaceId: commons_SpaceIdSchema,
  name: z.string().describe('The name of the Runbook.'),
  config: runbooks_RunbookConfigSchema.describe('The configuration of the Runbook.'),
  status: runbooks_RunbookStatusSchema.describe('The status of the Runbook.'),
  type: runbooks_RunbookTypeSchema.describe('The type of the Runbook.'),
})

export const runbooks_UpdateRunbookRequestSchema = z.object({
  name: z.string().optional().describe('The name of the Runbook.'),
  status: runbooks_RunbookStatusSchema.optional().describe('The status of the Runbook.'),
  config: runbooks_RunbookConfigSchema.optional().describe('The configuration of the Runbook.'),
})

export const auth_ApiCredentialsSchema = z.object({
  clientId: z.string(),
  secret: z.string(),
})

export const auth_AccessTokenResponseSchema = z.object({
  data: commons_AccessTokenSchema,
})

export const auth_ApiKeyIdSchema = z.string().describe('Api Key ID')

export const auth_RawKeySchema = z.string().describe('Raw Api Key')

export const auth_ApiKeyTypeSchema = z.enum(['PUBLISHABLE', 'SECRET'])

export const auth_ApiKeyOperationSchema = z.object({
  path: z.string(),
  method: z.string(),
})

export const auth_ApiKeySchema = z.object({
  id: auth_ApiKeyIdSchema,
  rawKey: auth_RawKeySchema.optional(),
  type: auth_ApiKeyTypeSchema,
  environmentId: commons_EnvironmentIdSchema.optional(),
  accountId: commons_AccountIdSchema.optional(),
  operations: z.array(auth_ApiKeyOperationSchema),
  createdAt: z.string(),
  updatedAt: z.string().optional(),
  deletedAt: z.string().optional(),
  secret: z.string().optional(),
})

export const auth_ApiKeysResponseSchema = z.object({
  data: z.array(auth_ApiKeySchema),
})

export const auth_UserCredentialsSchema = z.object({
  email: z.string().describe('Email'),
  password: z.string().describe('Password'),
})

export const auth_CredentialsSchema = z.union([
  auth_UserCredentialsSchema.extend({ type: z.literal('userCredentials') }),
  auth_ApiCredentialsSchema.extend({ type: z.literal('apiCredentials') }),
])

export const auth_FronteggUserCredentialsSchema = z.object({
  email: z.string().describe('Email'),
  name: z.string().optional().describe('Name'),
  tenantId: z.string().optional().describe('Tenant ID'),
})

export const auth_SftpCredentialsSchema = z.object({
  username: z.string(),
  password: z.string(),
  host: z.string(),
  port: z.string(),
})

export const auth_PersonalAccessTokenIdSchema = z.string().describe('Personal Access Token ID')

export const auth_PersonalAccessTokenSchema = z.object({
  id: auth_PersonalAccessTokenIdSchema,
  name: z.string(),
  createdAt: z.string(),
  lastUsedAt: z.string().optional(),
})

export const auth_PersonalAccessTokensResponseSchema = z.object({
  data: z.array(auth_PersonalAccessTokenSchema),
})

export const auth_CreatePersonalAccessTokenResponseDataSchema = z.object({
  token: z.string(),
  personalAccessToken: auth_PersonalAccessTokenSchema,
})

export const auth_CreatePersonalAccessTokenResponseSchema = z.object({
  data: auth_CreatePersonalAccessTokenResponseDataSchema,
})

export const events_DomainSchema = z.enum([
  'file',
  'space',
  'workbook',
  'job',
  'document',
  'sheet',
  'program',
  'secret',
  'cron',
  'environment',
  'data-clip',
  'canvas',
  'canvas-area',
  'thread',
])

export const events_EventContextSlugsSchema = z.object({
  space: z.string().optional().describe('The slug of the space'),
  workbook: z.string().optional().describe('The slug of the workbook'),
  sheet: z.string().optional().describe('The slug of the sheet'),
})

export const events_ActionNameSchema = z.string().describe('Name of an action')

export const events_SheetSlugSchema = z.string().describe('Sheet Slug')

export const events_ContextSchema = z.object({
  namespaces: z.array(z.string()).optional().describe('The namespaces of the event'),
  slugs: events_EventContextSlugsSchema.optional().describe('The slugs of related resources'),
  actionName: events_ActionNameSchema.optional(),
  accountId: commons_AccountIdSchema,
  environmentId: commons_EnvironmentIdSchema,
  spaceId: commons_SpaceIdSchema.optional(),
  workbookId: commons_WorkbookIdSchema.optional(),
  sheetId: commons_SheetIdSchema.optional(),
  sheetSlug: events_SheetSlugSchema.optional(),
  snapshotId: commons_SnapshotIdSchema.optional(),
  versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead.'),
  commitId: commons_CommitIdSchema.optional(),
  jobId: commons_JobIdSchema.optional(),
  programId: commons_ProgramIdSchema.optional(),
  fileId: commons_FileIdSchema.optional(),
  documentId: commons_DocumentIdSchema.optional(),
  precedingEventId: commons_EventIdSchema.optional(),
  actorId: z.string().optional().describe('Can be a UserId, GuestId, or AgentId'),
  appId: commons_AppIdSchema.optional(),
  actionId: commons_ActionIdSchema.optional(),
  dataClipId: commons_DataClipIdSchema.optional(),
  threadId: commons_ThreadIdSchema.optional(),
})

export const events_ProgressSchema = z.object({
  current: z.number().int().optional().describe('The current progress of the event'),
  total: z.number().int().optional().describe('The total number of events in this group'),
  percent: z.number().int().optional().describe('The percent complete of the event group'),
})

export const events_EventAttributesSchema = z.object({
  targetUpdatedAt: z.string().optional().describe('Date the related entity was last updated'),
  progress: events_ProgressSchema
    .optional()
    .describe('The progress of the event within a collection of iterable events'),
})

export const events_OriginSchema = z.object({
  id: z.string().optional(),
  slug: z.string().optional(),
})

export const events_BaseEventSchema = z.object({
  domain: events_DomainSchema.describe('The domain of the event'),
  context: events_ContextSchema.describe('The context of the event'),
  attributes: events_EventAttributesSchema.optional().describe('The attributes of the event'),
  callbackUrl: z.string().optional().describe('The callback url to acknowledge the event'),
  dataUrl: z.string().optional().describe('The url to retrieve the data associated with the event'),
  target: z.string().optional(),
  origin: events_OriginSchema.optional(),
  namespaces: z.array(z.string()).optional(),
})

export const events_GenericEventSchema = z
  .object({
    id: commons_EventIdSchema,
    createdAt: z.string().describe('Date the event was created'),
    deletedAt: z.string().optional().describe('Date the event was deleted'),
    acknowledgedAt: z.string().optional().describe('Date the event was acknowledged'),
    acknowledgedBy: z.string().optional().describe('The actor (user or system) who acknowledged the event'),
    payload: z.record(z.string(), z.unknown()),
  })
  .merge(events_BaseEventSchema)

export const events_EventSchema = z.union([
  events_GenericEventSchema.extend({ type: z.literal('agent:created') }),
  events_GenericEventSchema.extend({ type: z.literal('agent:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('agent:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('space:created') }),
  events_GenericEventSchema.extend({ type: z.literal('space:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('space:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('space:archived') }),
  events_GenericEventSchema.extend({ type: z.literal('space:expired') }),
  events_GenericEventSchema.extend({ type: z.literal('space:guestAdded') }),
  events_GenericEventSchema.extend({ type: z.literal('space:guestRemoved') }),
  events_GenericEventSchema.extend({ type: z.literal('document:created') }),
  events_GenericEventSchema.extend({ type: z.literal('document:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('document:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('workbook:created') }),
  events_GenericEventSchema.extend({ type: z.literal('workbook:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('workbook:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('workbook:expired') }),
  events_GenericEventSchema.extend({ type: z.literal('sheet:created') }),
  events_GenericEventSchema.extend({ type: z.literal('sheet:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('sheet:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('sheet:counts-updated') }),
  events_GenericEventSchema.extend({ type: z.literal('sheet:calculation-updated') }),
  events_GenericEventSchema.extend({ type: z.literal('snapshot:created') }),
  events_GenericEventSchema.extend({ type: z.literal('records:created') }),
  events_GenericEventSchema.extend({ type: z.literal('records:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('records:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('file:created') }),
  events_GenericEventSchema.extend({ type: z.literal('file:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('file:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('file:expired') }),
  events_GenericEventSchema.extend({ type: z.literal('job:created') }),
  events_GenericEventSchema.extend({ type: z.literal('job:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('job:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('job:failed') }),
  events_GenericEventSchema.extend({ type: z.literal('job:completed') }),
  events_GenericEventSchema.extend({ type: z.literal('job:ready') }),
  events_GenericEventSchema.extend({ type: z.literal('job:scheduled') }),
  events_GenericEventSchema.extend({ type: z.literal('job:outcome-acknowledged') }),
  events_GenericEventSchema.extend({ type: z.literal('job:parts-completed') }),
  events_GenericEventSchema.extend({ type: z.literal('program:created') }),
  events_GenericEventSchema.extend({ type: z.literal('program:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('commit:created') }),
  events_GenericEventSchema.extend({ type: z.literal('commit:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('commit:completed') }),
  events_GenericEventSchema.extend({ type: z.literal('secret:created') }),
  events_GenericEventSchema.extend({ type: z.literal('secret:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('secret:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('layer:created') }),
  events_GenericEventSchema.extend({ type: z.literal('environment:created') }),
  events_GenericEventSchema.extend({ type: z.literal('environment:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('environment:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('environment:autobuild-created') }),
  events_GenericEventSchema.extend({ type: z.literal('action:created') }),
  events_GenericEventSchema.extend({ type: z.literal('action:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('action:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:created') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:collaborator-updated') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:resolutions-created') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:resolutions-updated') }),
  events_GenericEventSchema.extend({ type: z.literal('data-clip:resolutions-refreshed') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas:created') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas:deleted') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas-area:created') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas-area:updated') }),
  events_GenericEventSchema.extend({ type: z.literal('canvas-area:deleted') }),
])

export const events_ListAllEventsResponseSchema = z.object({
  data: z.array(events_EventSchema),
})

export const events_EventTopicSchema = z.enum([
  'agent:created',
  'agent:updated',
  'agent:deleted',
  'space:created',
  'space:updated',
  'space:deleted',
  'space:archived',
  'space:unarchived',
  'space:expired',
  'space:guestAdded',
  'space:guestRemoved',
  'document:created',
  'document:updated',
  'document:deleted',
  'workbook:created',
  'workbook:updated',
  'workbook:deleted',
  'workbook:expired',
  'sheet:created',
  'sheet:updated',
  'sheet:deleted',
  'sheet:counts-updated',
  'sheet:calculation-updated',
  'snapshot:created',
  'records:created',
  'records:updated',
  'records:deleted',
  'file:created',
  'file:updated',
  'file:deleted',
  'file:expired',
  'job:created',
  'job:updated',
  'job:deleted',
  'job:completed',
  'job:ready',
  'job:scheduled',
  'job:outcome-acknowledged',
  'job:parts-completed',
  'job:failed',
  'program:created',
  'program:updated',
  'commit:created',
  'commit:updated',
  'commit:completed',
  'layer:created',
  'secret:created',
  'secret:updated',
  'secret:deleted',
  'cron:5-minutes',
  'cron:hourly',
  'cron:daily',
  'cron:weekly',
  'environment:created',
  'environment:updated',
  'environment:deleted',
  'environment:autobuild-created',
  'action:created',
  'action:updated',
  'action:deleted',
  'data-clip:created',
  'data-clip:updated',
  'data-clip:deleted',
  'data-clip:collaborator-updated',
  'data-clip:resolutions-created',
  'data-clip:resolutions-updated',
  'data-clip:resolutions-refreshed',
  'canvas:created',
  'canvas:updated',
  'canvas:deleted',
  'canvas-area:created',
  'canvas-area:updated',
  'canvas-area:deleted',
  'thread:created',
  'thread:updated',
  'thread:deleted',
])

export const events_CreateEventConfigSchema = z
  .object({
    topic: events_EventTopicSchema,
    payload: z.record(z.string(), z.unknown()),
    deletedAt: z.string().optional().describe('Date the event was deleted'),
  })
  .merge(events_BaseEventSchema)

export const events_EventResponseSchema = z.object({
  data: events_EventSchema,
})

export const roles_RoleResponseSchema = z.object({
  id: commons_RoleIdSchema,
  name: z.string(),
  accountId: commons_AccountIdSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const roles_ListRolesResponseSchema = z.object({
  data: z.array(roles_RoleResponseSchema),
})

export const roles_ResourceIdUnionSchema = z.union([
  commons_AccountIdSchema,
  commons_EnvironmentIdSchema,
  commons_SpaceIdSchema,
])

export const roles_ActorRoleResponseSchema = z.object({
  id: commons_ActorRoleIdSchema,
  roleId: commons_RoleIdSchema,
  actorId: commons_ActorIdUnionSchema,
  resourceId: roles_ResourceIdUnionSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const roles_ListActorRolesResponseSchema = z.object({
  data: z.array(roles_ActorRoleResponseSchema),
})

export const roles_AssignActorRoleRequestSchema = z.object({
  roleId: commons_RoleIdSchema,
  resourceId: roles_ResourceIdUnionSchema,
})

export const roles_AssignRoleResponseDataSchema = z.object({
  id: commons_ActorRoleIdSchema,
  roleId: commons_RoleIdSchema,
  actorId: commons_ActorIdUnionSchema,
  resourceId: roles_ResourceIdUnionSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const roles_AssignRoleResponseSchema = z.object({
  data: roles_AssignRoleResponseDataSchema,
})

export const agents_CompilerSchema = z.enum(['js'])

export const agents_AgentConfigSchema = z.object({
  topics: z.array(events_EventTopicSchema).optional().describe('The topics the agent should listen for'),
  compiler: agents_CompilerSchema.optional().describe('The compiler of the agent'),
  source: z.string().optional().describe('The source of the agent'),
  sourceMap: z.string().optional().describe('The source map of the agent'),
  slug: z.string().optional().describe('The slug of the agent'),
  options: z.record(z.string(), z.unknown()).optional().describe('Options for the agent'),
  isSystem: z
    .boolean()
    .optional()
    .describe('Whether the agent is a system agent. This should be false for all agents created by users.'),
  namespace: z
    .string()
    .optional()
    .describe('The namespace this agent should be limited to. Right now, this is information only and not used to a'),
})

export const agents_AgentSchema = z
  .object({
    id: commons_AgentIdSchema,
    createdAt: z.string(),
    updatedAt: z.string(),
    accountId: commons_AccountIdSchema,
    environmentId: commons_EnvironmentIdSchema,
  })
  .merge(agents_AgentConfigSchema)

export const agents_ListAgentsResponseSchema = z.object({
  data: z.array(agents_AgentSchema).optional(),
  pagination: commons_PaginationSchema.optional(),
})

export const agents_AgentResponseSchema = z.object({
  data: agents_AgentSchema.optional(),
})

export const agents_AgentVersionSchema = z
  .object({
    id: commons_AgentVersionIdSchema,
    version: z.number().int(),
    origin: z.number().int(),
    createdAt: z.string(),
    updatedAt: z.string(),
    agent_id: commons_AgentIdSchema,
  })
  .merge(agents_AgentConfigSchema)

export const agents_ListAgentVersionsResponseSchema = z.object({
  data: z.array(agents_AgentVersionSchema).optional(),
})

export const agents_AgentVersionResponseSchema = z.object({
  data: agents_AgentVersionSchema.optional(),
})

export const agents_AgentStatsSchema = z.object({
  start: commons_StartSchema,
  end: commons_EndSchema,
  executions: z.number().int().describe('The total number of agent executions for this time period'),
  succeeded: z.number().int().describe('The total number of successful agent executions for this time period'),
  failed: z.number().int(),
})

export const agents_EnvironmentStatsSchema = z.object({
  agentExecutions: agents_AgentStatsSchema.optional(),
})

export const agents_EnvironmentStatsResponseSchema = z.object({
  data: agents_EnvironmentStatsSchema.optional(),
})

export const agents_AgentLogSchema = z.object({
  agentId: commons_AgentIdSchema,
  eventId: commons_EventIdSchema,
  success: z.boolean().describe('Whether the agent execution was successful'),
  createdAt: z.string(),
  completedAt: z.string(),
  log: z.string().optional().describe('The log of the agent execution'),
})

export const agents_GetAgentLogsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(agents_AgentLogSchema).optional(),
})

export const agents_DetailedAgentLogSchema = z.object({
  eventId: commons_EventIdSchema,
  success: z.boolean().describe('Whether the agent execution was successful'),
  createdAt: z.string(),
  completedAt: z.string(),
  duration: z.number().int().describe('The duration of the agent execution'),
  topic: z.string().describe('The topics of the agent execution'),
  context: z.record(z.string(), z.unknown()).describe('The context of the agent execution'),
  log: z.string().optional().describe('The log of the agent execution'),
})

export const agents_GetDetailedAgentLogResponseSchema = z.object({
  data: agents_DetailedAgentLogSchema,
})

export const agents_GetDetailedAgentLogsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(agents_DetailedAgentLogSchema),
})

export const agents_ExecutionSchema = z.object({
  eventId: commons_EventIdSchema,
  success: z.boolean().describe('Whether the agent execution was successful'),
  createdAt: z.string(),
  completedAt: z.string(),
  duration: z.number().int().describe('The duration of the agent execution'),
  requestTime: z.number().int().optional().describe('The amount of time the agent spent making http requests'),
  requestCount: z.number().int().optional().describe('The number of requests made by the agent'),
  memoryUsage: z.number().int().optional().describe('The memory usage of the agent'),
  topic: z.string().describe('The topics of the agent execution'),
})

export const agents_GetExecutionsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(agents_ExecutionSchema),
})

export const environments_GuestAuthenticationEnumSchema = z.enum(['shared_link', 'magic_link'])

export const environments_EnvironmentSchema = z.object({
  id: commons_EnvironmentIdSchema,
  accountId: commons_AccountIdSchema,
  name: z.string().describe('The name of the environment'),
  isProd: z.boolean().describe('Whether or not the environment is a production environment'),
  guestAuthentication: z.array(environments_GuestAuthenticationEnumSchema),
  features: z.record(z.string(), z.unknown()),
  metadata: z.record(z.string(), z.unknown()),
  translationsPath: z.string().optional(),
  namespaces: z.array(z.string()).optional(),
  languageOverride: z.string().optional(),
})

export const environments_ListEnvironmentsResponseSchema = z.object({
  data: z.array(environments_EnvironmentSchema),
  pagination: commons_PaginationSchema.optional(),
})

export const environments_EnvironmentResponseSchema = z.object({
  data: environments_EnvironmentSchema,
})

export const environments_EnvironmentConfigCreateSchema = z.object({
  name: z.string().describe('The name of the environment'),
  isProd: z.boolean().describe('Whether or not the environment is a production environment'),
  guestAuthentication: z.array(environments_GuestAuthenticationEnumSchema).optional(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  translationsPath: z.string().optional(),
  namespaces: z.array(z.string()).optional(),
  languageOverride: z.string().optional(),
})

export const environments_EnvironmentConfigUpdateSchema = z.object({
  name: z.string().optional().describe('The name of the environment'),
  isProd: z.boolean().optional().describe('Whether or not the environment is a production environment'),
  guestAuthentication: z.array(environments_GuestAuthenticationEnumSchema).optional(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  translationsPath: z.string().optional(),
  namespaces: z.array(z.string()).optional(),
  languageOverride: z.string().optional(),
})

export const environments_GuideVersionResourceSchema = z.object({
  id: z.string(),
  version: z.number().int(),
  content: z.string(),
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const environments_GuideResourceSchema = z.object({
  id: commons_GuideIdSchema,
  description: z.string().optional(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  slug: z.string(),
  title: z.string(),
  versions: z.array(environments_GuideVersionResourceSchema),
  blocks: z.array(z.record(z.string(), z.unknown()).optional()),
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const environments_GuideListResponseSchema = z.object({
  data: z.array(environments_GuideResourceSchema),
})

export const environments_GuideDetailResponseSchema = z.object({
  data: environments_GuideResourceSchema,
})

export const environments_GuideDeleteResponseDataSchema = z.object({
  success: z.boolean(),
})

export const environments_GuideDeleteResponseSchema = z.object({
  data: environments_GuideDeleteResponseDataSchema,
})

export const environments_GuideUpdateRequestSchema = z.object({
  description: z.string().optional(),
  title: z.string().optional(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  slug: z.string().optional(),
  versions: z.array(environments_GuideVersionResourceSchema).optional(),
  blocks: z.array(z.record(z.string(), z.unknown()).optional()).optional(),
  environmentId: z.string().optional(),
})

export const environments_GuideCreateRequestSchema = z.object({
  description: z.string(),
  title: z.string(),
  metadata: z.record(z.string(), z.unknown()).optional(),
  slug: z.string(),
  versions: z.array(environments_GuideVersionResourceSchema),
  blocks: z.array(z.record(z.string(), z.unknown()).optional()),
  environmentId: z.string(),
})

export const environments_GuideVersionResponseSchema = z.object({
  data: environments_GuideVersionResourceSchema,
})

export const environments_GuideVersionListResponseSchema = z.object({
  data: z.array(environments_GuideVersionResourceSchema),
})

export const spaces_SpaceDraftSchema = z.object({
  sourceSpaceId: commons_SpaceIdSchema,
  draftSpaceId: commons_SpaceIdSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  mergedAt: z.string().optional(),
  deletedAt: z.string().optional(),
})

export const spaces_SpaceDraftResponseSchema = z.object({
  data: spaces_SpaceDraftSchema,
})

export const spaces_SpaceDraftListResponseSchema = z.object({
  data: z.array(spaces_SpaceDraftSchema),
})

export const spaces_SpaceSizeSchema = z.object({
  name: z.string(),
  id: z.string(),
  numUsers: z.number().int(),
  pdv: z.number().int(),
  numFiles: z.number().int(),
})

export const spaces_SpaceSidebarConfigSchema = z.object({
  workbookSidebarOrder: z
    .array(commons_WorkbookIdSchema)
    .optional()
    .describe('Used to set the order of workbooks in the sidebar. This will not affect workbooks that are pinned an'),
})

export const spaces_SpaceSettingsSchema = z.object({
  sidebarConfig: spaces_SpaceSidebarConfigSchema
    .optional()
    .describe('The sidebar configuration for the space. (This will eventually replace metadata.sidebarconfig)'),
  filesMappedAfterJob: z
    .string()
    .optional()
    .describe('The name of the job that needs to complete before navigating to file mapping'),
})

export const spaces_SpaceAccessSchema = z.enum(['*', 'upload'])

export const spaces_InternalSpaceConfigBaseSchema = z.object({
  spaceConfigId: commons_SpaceConfigIdSchema.optional(),
  environmentId: commons_EnvironmentIdSchema.optional(),
  primaryWorkbookId: commons_WorkbookIdSchema
    .optional()
    .describe('The ID of the primary workbook for the space. This should not be included in create space requests.'),
  metadata: z.unknown().optional().describe('Metadata for the space'),
  settings: spaces_SpaceSettingsSchema.optional().describe('The Space settings.'),
  actions: z.array(commons_ActionSchema).optional(),
  access: z.array(spaces_SpaceAccessSchema).optional(),
  autoConfigure: z.boolean().optional(),
  namespace: z.string().optional(),
  labels: z.array(z.string()).optional(),
  translationsPath: z.string().optional(),
  languageOverride: z.string().optional(),
  archivedAt: z.string().optional().describe('Date when space was archived'),
  appId: commons_AppIdSchema.optional().describe('The ID of the App that space is associated with'),
  isAppTemplate: z
    .boolean()
    .optional()
    .describe('Whether the space is an app template. Only one space per app can be an app template.'),
})

export const spaces_SpaceSchema = z
  .object({
    id: commons_SpaceIdSchema,
    workbooksCount: z.number().int().optional().describe('Amount of workbooks in the space'),
    filesCount: z.number().int().optional().describe('Amount of files in the space'),
    createdByUserId: commons_UserIdSchema.optional(),
    createdByUserName: z.string().optional().describe('User name who created space'),
    createdAt: z.string().describe('Date when space was created'),
    updatedAt: z.string().describe('Date when space was updated'),
    expiredAt: z.string().optional().describe('Date when space was expired'),
    lastActivityAt: z
      .string()
      .optional()
      .describe('This date marks the most recent activity within the space, tracking actions to the second. Activitie'),
    guestLink: z.string().optional().describe('Guest link to the space'),
    name: z.string().describe('The name of the space'),
    displayOrder: z.number().int().optional().describe('The display order'),
    accessToken: z.string().optional().describe('Access token for the space'),
    isCollaborative: z.boolean().optional().describe('Flag for collaborative (project) spaces'),
    size: spaces_SpaceSizeSchema.optional().describe('Size information for the space'),
    upgradedAt: z.string().optional().describe('Date when the space was upgraded'),
    guestAuthentication: z.array(environments_GuestAuthenticationEnumSchema).describe('Type of guest authentication'),
  })
  .merge(spaces_InternalSpaceConfigBaseSchema)

export const spaces_ListSpacesResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(spaces_SpaceSchema),
})

export const spaces_ActivitySchema = z.object({
  activity: events_EventTopicSchema,
  resourceId: z.string().optional(),
  resourceType: commons_ResourceTypeSchema.optional(),
  resourceSlug: z.string().optional(),
  resourceName: z.string().optional(),
  actorId: z.string().optional(),
  actorType: commons_ActorTypeSchema.optional(),
  actorName: z.string().optional(),
  context: events_ContextSchema,
  payload: z.record(z.string(), z.unknown()).optional(),
  activityTime: z.string(),
})

export const spaces_ActivityResponseSchema = z.object({
  data: z.array(spaces_ActivitySchema),
  pagination: commons_PaginationSchema.optional(),
})

export const spaces_SpaceResponseSchema = z.object({
  data: spaces_SpaceSchema,
})

export const spaces_SpaceConfigSchema = z
  .object({
    name: z.string().optional().describe('The name of the space'),
    displayOrder: z.number().int().optional().describe('The display order'),
    guestAuthentication: z.array(environments_GuestAuthenticationEnumSchema).optional(),
  })
  .merge(spaces_InternalSpaceConfigBaseSchema)

export const spaces_UpgradeSpaceConfigSchema = z.object({
  id: z.string(),
})

export const spaces_EventTokenSchema = z.object({
  accountId: commons_AccountIdSchema.optional().describe('The ID of the Account.'),
  subscribeKey: z.string().optional().describe('The id of the event bus to subscribe to'),
  ttl: z.number().int().optional().describe('Time to live in minutes'),
  token: z.string().optional().describe('This should be your API key.'),
})

export const spaces_EventTokenResponseSchema = z.object({
  data: spaces_EventTokenSchema,
})

export const spaces_PubNubMessageActionSchema = z.object({
  uuid: z.string().describe('The UUID of the user who took the action'),
  actionTimetoken: z.string().describe('The timetoken when this action was taken'),
})

export const spaces_PubNubMessageSchema = z.object({
  channel: z.string().describe('The channel this message was published to'),
  message: z.unknown().describe('The message payload'),
  timetoken: z.string().describe('The timetoken when this message was published'),
  messageType: z.string().optional().describe('Optional message type'),
  uuid: z.string().optional().describe('Optional publisher UUID'),
  error: z.string().optional().describe('Optional error message'),
  meta: z.record(z.string(), z.unknown()).optional().describe('Optional metadata'),
  actions: z
    .record(z.string(), z.record(z.string(), z.array(spaces_PubNubMessageActionSchema)))
    .describe('Message actions grouped by type and value'),
})

export const spaces_PubNubMessageHistoryResponseSchema = z.object({
  channels: z
    .record(z.string(), z.array(spaces_PubNubMessageSchema))
    .describe('Map of channel names to their messages'),
})

export const spaces_GetSpacesSortFieldSchema = z.enum([
  'name',
  'workbooksCount',
  'filesCount',
  'environmentId',
  'createdByUserName',
  'createdAt',
  'lastActivityAt',
])

export const spaces_GetSpaceActvitySortFieldSchema = z.enum(['activity', 'created_at'])

export const spaces_CreateConnectionLinkRequestSchema = z.object({
  endUserOriginId: z.string().describe('The origin of the end user.'),
  endUserOrganizationName: z.string().describe('The Company name of the end user.'),
  endUserEmailAddress: z.string().describe('The email of the end user.'),
  categories: z.array(z.string()),
  integration: z.string().optional(),
  linkExpiryMins: z.number().int().optional().describe('Amount of time for the link to expire.'),
  shouldCreateMagicLinkUrl: z.boolean().optional().describe('A boolean flag if a magic link should be created.'),
})

export const spaces_ConnectionLinkSchema = z.object({
  token: z.string().describe('The API key.'),
})

export const spaces_CreateConnectionLinkResponseSchema = z.object({
  data: spaces_ConnectionLinkSchema,
})

export const spaces_AuditActivitySchema = z.enum([
  'agent:created',
  'agent:updated',
  'agent:deleted',
  'space:created',
  'space:updated',
  'space:deleted',
  'space:archived',
  'space:unarchived',
  'space:expired',
  'space:guestAdded',
  'space:guestRemoved',
  'document:created',
  'document:updated',
  'document:deleted',
  'workbook:created',
  'workbook:updated',
  'workbook:deleted',
  'workbook:expired',
  'sheet:created',
  'sheet:updated',
  'sheet:deleted',
  'snapshot:created',
  'file:created',
  'file:deleted',
  'file:expired',
  'job:created',
  'job:deleted',
  'job:completed',
  'job:ready',
  'job:scheduled',
  'job:outcome-acknowledged',
  'job:parts-completed',
  'job:failed',
  'program:created',
  'program:updated',
  'commit:created',
  'commit:updated',
  'commit:completed',
  'layer:created',
  'secret:created',
  'secret:updated',
  'secret:deleted',
])

export const spaces_TriggerEnumSchema = z.enum(['first', 'hover', 'event', 'manual'])

export const spaces_TypeEnumSchema = z.enum(['sidebar', 'popout', 'tooltip'])

export const spaces_RoleEnumSchema = z.enum(['admin', 'guest'])

export const spaces_GuidanceOptionsSchema = z.object({
  target: z.string(),
  trigger: spaces_TriggerEnumSchema,
  type: spaces_TypeEnumSchema,
  role: spaces_RoleEnumSchema,
})

export const spaces_GuidanceResourceSchema = z.object({
  id: commons_GuidanceIdSchema,
  guideSlug: z.string(),
  options: spaces_GuidanceOptionsSchema,
})

export const spaces_GuidanceApiCreateDataSchema = z.object({
  guideSlug: z.string(),
  options: spaces_GuidanceOptionsSchema.describe('Options for the guidance'),
})

export const spaces_GuidanceApiUpdateDataSchema = z.object({
  options: spaces_GuidanceOptionsSchema.describe('Options for the guidance'),
})

export const spaces_GuidanceListResponseSchema = z.object({
  data: z.array(spaces_GuidanceResourceSchema),
})

export const secrets_SecretNameSchema = z.string().describe('The name of a secret. Minimum 1 character, maximum 1024')

export const secrets_SecretValueSchema = z.string().describe('The value of a secret. Minimum 1 character, maximum 1024')

export const secrets_WriteSecretSchema = z.object({
  name: secrets_SecretNameSchema.describe('The reference name for a secret.'),
  value: secrets_SecretValueSchema.describe('The secret value. This is hidden in the UI.'),
  environmentId: commons_EnvironmentIdSchema.optional().describe('The Environment of the secret.'),
  spaceId: commons_SpaceIdSchema.optional().describe('The Space of the secret.'),
  actorId: commons_ActorIdUnionSchema.optional().describe('The Actor of the secret.'),
})

export const secrets_SecretSchema = z
  .object({
    id: commons_SecretIdSchema.describe('The ID of the secret.'),
  })
  .merge(secrets_WriteSecretSchema)

export const secrets_SecretsResponseSchema = z.object({
  data: z.array(secrets_SecretSchema),
})

export const canvas_CanvasSchema = z.object({
  id: commons_CanvasIdSchema,
  namespace: z.string().optional().describe('Optional namespace for organizing canvases'),
  context: z.unknown().describe('Additional context data for the canvas'),
  metadata: z.unknown().describe('Metadata associated with the canvas'),
  layout: z.unknown().describe('Layout configuration for the canvas'),
  environmentId: commons_EnvironmentIdSchema.describe('ID of the environment this canvas belongs to'),
  accountId: commons_AccountIdSchema.describe('ID of the account that owns this canvas'),
  spaceId: commons_SpaceIdSchema.describe('ID of the space this canvas belongs to'),
  actorId: commons_ActorIdSchema.optional().describe('ID of the actor who created this canvas'),
  createdById: commons_ActorIdSchema.optional().describe('ID of the actor who created this canvas'),
  createdAt: z.string().describe('When the canvas was created'),
  updatedAt: z.string().describe('When the canvas was last updated'),
  deletedAt: z.string().optional().describe('When the canvas was deleted, if applicable'),
})

export const canvas_ListCanvasesResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(canvas_CanvasSchema),
})

export const canvas_CanvasResponseSchema = z.object({
  data: canvas_CanvasSchema,
})

export const billing_StripePriceTierSchema = z.object({
  unitAmount: z.number().int(),
  upTo: z.number().int(),
})

export const billing_StripePriceSchema = z.object({
  id: z.string(),
  unitAmount: z.number().int().optional(),
  tiers: z.array(billing_StripePriceTierSchema).optional(),
})

export const billing_StripeMetadataSchema = z.object({
  canSelfServe: z.string().optional(),
  commitment: z.string().optional(),
  isDefaultSelection: z.string().optional(),
  interval: z.string().optional(),
  planType: z.string().optional(),
  platform: z.string().optional(),
  prepayId: z.string().optional(),
  proOnly: z.string().optional(),
  productType: z.string().optional(),
  unitLabel: z.string().optional(),
  usageType: z.string().optional(),
})

export const billing_ProductSchema = z.object({
  id: z.string(),
  object: z.string(),
  active: z.boolean(),
  attributes: z.array(z.string()),
  created: z.number().int(),
  default_price: billing_StripePriceSchema,
  description: z.string(),
  metadata: billing_StripeMetadataSchema,
  name: z.string(),
})

export const billing_ProductsResponseSchema = z.object({
  data: z.array(billing_ProductSchema),
})

export const billing_CheckoutSessionSchema = z.object({
  id: z.string().optional(),
  object: z.string().optional(),
})

export const billing_CreateCheckoutSessionResponseSchema = z.object({
  data: billing_CheckoutSessionSchema,
})

export const billing_LineItemSchema = z.object({
  price: z.string(),
  quantity: z.number().int(),
})

export const billing_CreateCheckoutSessionRequestSchema = z.object({
  lineItems: z.array(billing_LineItemSchema),
  successUrl: z.string(),
})

export const billing_SubscriptionUpdatesSchema = z.object({
  lineItems: z.array(billing_LineItemSchema),
})

export const billing_BillingSubscriptionItemSchema = z.object({
  price: billing_StripePriceSchema,
  product: billing_ProductSchema,
  quantity: z.number().int(),
})

export const billing_BillingSubscriptionSchema = z.object({
  id: commons_BillingSubscriptionIdSchema,
  stripeSubscriptionId: z.string(),
  status: z.string(),
  accountId: commons_AccountIdSchema,
  items: z.array(billing_BillingSubscriptionItemSchema),
})

export const billing_BillingSubscriptionsResponseSchema = z.object({
  data: z.array(billing_BillingSubscriptionSchema),
})

export const billing_BillingSubscriptionResponseSchema = z.object({
  data: billing_BillingSubscriptionSchema.optional(),
})

export const billing_PriceSchema = z.object({
  id: z.string(),
})

export const billing_BillingPlanWithUsageSchema = z.object({
  accountId: commons_AccountIdSchema,
  plan: z.string(),
  pdvs: z.number().int(),
  files: z.number().int(),
  fromDate: z.string(),
  toDate: z.string(),
  freeFileLimit: z.number().int(),
  freePdvLimit: z.number().int(),
})

export const billing_BillingPlanWithUsageResponseSchema = z.object({
  data: billing_BillingPlanWithUsageSchema,
})

export const billing_BillingLimitsSchema = z.object({
  fromDate: z.string(),
  toDate: z.string(),
  fileUploadIsLockedUntilPayment: z.boolean(),
  sheetIsLockedUntilPayment: z.boolean(),
})

export const billing_BillingLimitsResponseSchema = z.object({
  data: billing_BillingLimitsSchema,
})

export const messages_MessageRoleSchema = z.enum(['system', 'user', 'assistant', 'tool'])

export const messages_MessageModelSchema = z.object({
  id: commons_MessageIdSchema,
  threadId: commons_ThreadIdSchema,
  content: z.record(z.string(), z.unknown()).describe('The message content'),
  createdAt: z.string(),
  updatedAt: z.string(),
  role: messages_MessageRoleSchema.describe('The role of the message sender'),
  state: z.record(z.string(), z.unknown()).optional().describe('Persistent state for the message'),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Additional metadata associated with the message'),
})

export const messages_MessageApiCreateDataSchema = z.object({
  content: z.record(z.string(), z.unknown()).describe('The message content'),
  role: messages_MessageRoleSchema.describe('The role of the message'),
  state: z.record(z.string(), z.unknown()).optional().describe('Persistent state for the message'),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Additional metadata for the message'),
})

export const messages_MessageApiUpdateDataSchema = z.object({
  content: z.record(z.string(), z.unknown()).optional().describe('Updated message content'),
  role: messages_MessageRoleSchema.optional().describe('Updated message role'),
  state: z.record(z.string(), z.unknown()).optional().describe('Updated state information'),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Updated metadata'),
  threadId: commons_ThreadIdSchema.optional().describe('Updated thread ID'),
})

export const messages_MessageCollectionSchema = z.object({
  data: z.array(messages_MessageModelSchema),
})

export const documents_DocumentConfigSchema = z.object({
  title: z.string(),
  body: z.string(),
  treatments: z
    .array(z.string())
    .optional()
    .describe('Certain treatments will cause your Document to look or behave differently.'),
  actions: z.array(commons_ActionSchema).optional(),
})

export const documents_DocumentSchema = z
  .object({
    id: commons_DocumentIdSchema,
    spaceId: commons_SpaceIdSchema.optional(),
    environmentId: commons_EnvironmentIdSchema.optional(),
    createdAt: z.string().describe('Date the document was created'),
    updatedAt: z.string().describe('Date the document was last updated'),
  })
  .merge(documents_DocumentConfigSchema)

export const documents_ListDocumentsResponseSchema = z.object({
  data: z.array(documents_DocumentSchema),
})

export const documents_DocumentResponseSchema = z.object({
  data: documents_DocumentSchema,
})

export const agentExports_AgentExportTypeSchema = z.enum(['AUTOBUILD_INLINED', 'SYSTEM_COMBINED', 'SOURCE'])

export const agentExports_AgentExportSchema = z.object({
  id: commons_AgentExportIdSchema,
  agentId: commons_AgentIdSchema,
  exportType: agentExports_AgentExportTypeSchema,
  accountId: commons_AccountIdSchema,
  environmentId: commons_EnvironmentIdSchema,
  createdAt: z.string(),
  updatedAt: z.string(),
  deletedAt: z.string().optional(),
})

export const agentExports_ListAgentExportsResponseSchema = z.object({
  data: z.array(agentExports_AgentExportSchema),
  pagination: commons_PaginationSchema,
})

export const agentExports_GetAgentExportResponseSchema = z.object({
  data: agentExports_AgentExportSchema,
})

export const users_UserConfigSchema = z.object({
  email: z.string(),
  name: z.string(),
  accountId: commons_AccountIdSchema,
})

export const users_UserSchema = z
  .object({
    id: commons_UserIdSchema,
    idp: z.string(),
    idpRef: z.string().optional(),
    metadata: z.record(z.string(), z.unknown()),
    createdAt: z.string(),
    updatedAt: z.string(),
    lastSeenAt: z.string().optional(),
    dashboard: z.number().int().optional(),
  })
  .merge(users_UserConfigSchema)

export const users_ListUsersResponseSchema = z.object({
  data: z.array(users_UserSchema),
  pagination: commons_PaginationSchema.optional(),
})

export const users_UserResponseSchema = z.object({
  data: users_UserSchema,
})

export const users_UserWithRolesSchema = z
  .object({
    actorRoles: z.array(roles_ActorRoleResponseSchema),
  })
  .merge(users_UserSchema)

export const users_UserWithRolesResponseSchema = z.object({
  data: users_UserWithRolesSchema,
})

export const users_ListUsersSortFieldSchema = z.enum([
  'email',
  'name',
  'id',
  'idp',
  'idp_ref',
  'created_at',
  'updated_at',
  'last_seen_at',
  'dashboard',
])

export const users_UserCreateAndInviteRequestSchema = z.object({
  email: z.string(),
  name: z.string(),
  actorRoles: z.array(roles_AssignActorRoleRequestSchema),
})

export const users_ApiTokenSchema = z.object({
  clientId: z.string(),
  description: z.string(),
  metadata: z.record(z.string(), z.unknown()),
  createdAt: z.string(),
  secret: z.string().optional(),
})

export const users_ListApiTokensResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(users_ApiTokenSchema),
})

export const users_ApiTokenResponseSchema = z.object({
  data: users_ApiTokenSchema,
})

export const users_ExchangeTokenDataSchema = z.object({
  valid: z.boolean().describe('Whether the provided token was valid'),
  token: z.string().optional().describe('The refreshed token, if the provided token was valid'),
  sentTo: z
    .string()
    .optional()
    .describe('The email address the recovery email was sent to, if the provided token was not valid'),
})

export const users_ExchangeTokenResponseSchema = z.object({
  data: users_ExchangeTokenDataSchema,
})

export const accounts_AccountSchema = z.object({
  id: commons_AccountIdSchema,
  name: z.string(),
  subdomain: z.string().optional(),
  vanityDomainDashboard: z.string().optional(),
  vanityDomainSpaces: z.string().optional(),
  embeddedDomainWhitelist: z.array(z.string()).optional(),
  customFromEmail: z.string().optional(),
  stripeCustomerId: z.string().optional(),
  metadata: z.record(z.string(), z.unknown()),
  createdAt: z.string(),
  updatedAt: z.string(),
  defaultAppId: commons_AppIdSchema.optional(),
  dashboard: z.number().int().optional(),
})

export const accounts_AccountResponseSchema = z.object({
  data: accounts_AccountSchema,
})

export const accounts_AccountPatchSchema = z.object({
  defaultAppId: commons_AppIdSchema,
})

export const webhook_StripeWebhookRequestSchema = z.object({
  id: z.string(),
  idempotency_key: z.string(),
})

export const webhook_StripeWebhookSchema = z.object({
  id: z.string(),
  object: z.string(),
  data: z.record(z.string(), z.unknown()),
  request: webhook_StripeWebhookRequestSchema,
  type: z.string(),
})

export const guests_GuestWorkbookSchema = z.object({
  id: commons_WorkbookIdSchema,
})

export const guests_GuestSheetSchema = z.object({
  id: commons_SheetIdSchema,
})

export const guests_GuestSpaceSchema = z.object({
  id: commons_SpaceIdSchema,
  workbooks: z.array(guests_GuestWorkbookSchema).optional(),
  sheets: z.array(guests_GuestSheetSchema).optional(),
  lastAccessed: z.string().optional(),
})

export const guests_GuestConfigSchema = z.object({
  environmentId: commons_EnvironmentIdSchema,
  email: z.string(),
  name: z.string(),
  spaces: z.array(guests_GuestSpaceSchema),
})

export const guests_GuestSchema = z
  .object({
    id: commons_GuestIdSchema,
    createdAt: z.string().describe('Date the guest object was created'),
    updatedAt: z.string().describe('Date the guest object was last updated'),
  })
  .merge(guests_GuestConfigSchema)

export const guests_ListGuestsResponseSchema = z.object({
  data: z.array(guests_GuestSchema),
})

export const guests_CreateGuestResponseSchema = z.object({
  data: z.array(guests_GuestSchema),
})

export const guests_GuestResponseSchema = z.object({
  data: guests_GuestSchema,
})

export const guests_GuestConfigUpdateSchema = z.object({
  environmentId: commons_EnvironmentIdSchema.optional(),
  email: z.string().optional(),
  name: z.string().optional(),
  spaces: z.array(guests_GuestSpaceSchema).optional(),
})

export const guests_InviteSchema = z.object({
  guestId: commons_GuestIdSchema,
  spaceId: commons_SpaceIdSchema,
  fromName: z.string().optional().describe('The name of the person or company sending the invitation'),
  message: z.string().optional().describe('Message to send with the invite'),
})

export const guests_GuestTokenSchema = z.object({
  token: z.string().describe('The token used to authenticate the guest'),
  valid: z.boolean(),
})

export const guests_GuestTokenResponseSchema = z.object({
  data: guests_GuestTokenSchema,
})

export const canvasAreas_CanvasAreaLayoutSchema = z.enum(['split', 'drawer', 'modal'])

export const canvasAreas_CanvasAreaTypeSchema = z.enum([
  'mapping',
  'header',
  'agent',
  'form',
  'sheet',
  'sheets',
  'workbook',
  'document',
  'file',
  'iframe',
])

export const canvasAreas_CanvasAreaPositionSchema = z.enum(['top', 'left', 'right', 'middle', 'bottom'])

export const canvasAreas_CanvasAreaVisibilitySchema = z.enum(['visible', 'hidden', 'optional', 'skeleton'])

export const canvasAreas_CanvasAreaSchema = z.object({
  id: commons_CanvasAreaIdSchema,
  canvasId: commons_CanvasIdSchema.describe('ID of the canvas this area belongs to'),
  parentId: commons_CanvasAreaIdSchema.optional().describe('ID of the parent canvas area, if this is a nested area'),
  config: z.unknown().describe('Additional configuration data for the canvas area'),
  metadata: z.unknown().describe('Metadata associated with the canvas area'),
  layout: canvasAreas_CanvasAreaLayoutSchema.describe('Layout configuration for the canvas area'),
  overlay: z.unknown().describe('Overlay configuration for the canvas area'),
  type: canvasAreas_CanvasAreaTypeSchema.describe('Type of the canvas area'),
  position: canvasAreas_CanvasAreaPositionSchema.describe('Position of the canvas area within the canvas'),
  visibility: canvasAreas_CanvasAreaVisibilitySchema.describe('Visibility of the canvas area'),
  createdAt: z.string().describe('When the canvas area was created'),
  updatedAt: z.string().describe('When the canvas area was last updated'),
  deletedAt: z.string().optional().describe('When the canvas area was deleted, if applicable'),
})

export const canvasAreas_ListCanvasAreasResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(canvasAreas_CanvasAreaSchema),
})

export const canvasAreas_CanvasAreaResponseSchema = z.object({
  data: canvasAreas_CanvasAreaSchema,
})

export const mapping_KeyAdoptionStrategySchema = z.enum(['exact', 'contains', 'jaccard'])

export const mapping_FamilyConfigSchema = z.object({
  environmentId: commons_EnvironmentIdSchema.describe('ID of the environment'),
  namespace: z.string().optional().describe('Namespace of the family'),
  name: z.string().describe('Name of the family'),
  sourceKeys: z.array(z.string()).describe('Keys that define the family'),
  adoptionStrategy: mapping_KeyAdoptionStrategySchema.describe('Strategy for adopting programs into the family'),
})

export const mapping_FamilySchema = z
  .object({
    id: commons_FamilyIdSchema.describe('ID of the family'),
    totalPrograms: z.number().int().describe('Total number of programs in the family'),
    totalRules: z.number().int().describe('Total number of rules in the family'),
    totalCorrections: z.number().int().describe('Total number of corrections in the family'),
    createdAt: z.string().describe('Time the family was created'),
    updatedAt: z.string().describe('Time the family was last updated'),
    deletedAt: z.string().optional().describe('Time the family was deleted'),
  })
  .merge(mapping_FamilyConfigSchema)

export const mapping_MappingRuleConfigSchema = z.object({
  name: z.string().describe('Name of the mapping rule'),
  type: z.string(),
  config: z.unknown().optional(),
  acceptedAt: z.string().optional().describe('Time the mapping rule was last updated'),
  acceptedBy: commons_UserIdSchema.optional().describe('User ID of the contributor of the mapping rule'),
  metadata: z.unknown().optional().describe('Metadata of the mapping rule'),
})

export const mapping_ProgramConfigSchema = z.object({
  source: sheets_SheetConfigSchema.describe('Source schema'),
  destination: sheets_SheetConfigSchema.describe('Destination schema'),
  familyId: commons_FamilyIdSchema.optional().describe('ID of the family to add the program to'),
  namespace: z.string().optional().describe('Namespace of the program'),
  save: z
    .boolean()
    .optional()
    .describe('Whether to save the program for editing later. Defaults to false. If true, the response will contain'),
  rules: z
    .array(mapping_MappingRuleConfigSchema)
    .optional()
    .describe('Mapping rules to use for the program. If present, the program will be created with these rules.'),
})

export const mapping_MappingRuleOrConfigSchema = z
  .object({
    id: commons_MappingIdSchema.optional().describe('ID of the mapping rule'),
    confidence: z.number().int().optional().describe('Confidence of the mapping rule'),
    createdBy: commons_UserIdSchema.optional().describe('User ID of the creator of the mapping rule'),
    createdAt: z.string().optional().describe('Time the mapping rule was created'),
    updatedAt: z.string().optional().describe('Time the mapping rule was last updated'),
    deletedAt: z.string().optional().describe('Time the mapping rule was deleted'),
  })
  .merge(mapping_MappingRuleConfigSchema)

export const mapping_ProgramSummarySchema = z.object({
  totalRuleCount: z.number().int().describe('Total number of mapping rules'),
  addedRuleCount: z.number().int().describe('Number of mapping rules added'),
  deletedRuleCount: z.number().int().describe('Number of mapping rules deleted'),
})

export const mapping_ProgramSchema = z.object({
  rules: z.array(mapping_MappingRuleOrConfigSchema).describe('Mapping rules'),
  id: z.string().optional().describe('If this program was saved, this is the ID of the program'),
  namespace: z.string().optional().describe('Namespace of the program'),
  familyId: commons_FamilyIdSchema.optional().describe('Family ID of the program, if it belongs to a family'),
  createdAt: z.string().optional().describe('If this program was saved, this is the time it was created'),
  createdBy: commons_UserIdSchema.optional().describe('If this program was saved, this is the user ID of the creator'),
  sourceKeys: z.array(z.string()).describe('Source keys'),
  destinationKeys: z.array(z.string()).describe('Destination keys'),
  summary: mapping_ProgramSummarySchema.optional().describe('Summary of the mapping rules'),
  accessToken: z.string().optional().describe('If this program was saved, this token allows you to modify the program'),
})

export const mapping_ProgramsResponseSchema = z.object({
  data: z.array(mapping_ProgramSchema),
})

export const mapping_ProgramResponseSchema = z.object({
  data: mapping_ProgramSchema,
})

export const mapping_MappingRuleSchema = z
  .object({
    id: commons_MappingIdSchema.describe('ID of the mapping rule'),
    confidence: z.number().int().optional().describe('Confidence of the mapping rule'),
    createdBy: commons_UserIdSchema.optional().describe('User ID of the user who suggested the mapping rule'),
    createdAt: z.string().describe('Time the mapping rule was created'),
    updatedAt: z.string().describe('Time the mapping rule was last updated'),
    deletedAt: z.string().optional().describe('Time the mapping rule was deleted'),
  })
  .merge(mapping_MappingRuleConfigSchema)

export const mapping_CreateMappingRulesRequestSchema = z.array(mapping_MappingRuleConfigSchema)

export const mapping_UpdateMappingRulesRequestSchema = z.array(mapping_MappingRuleSchema)

export const mapping_MappingRuleResponseSchema = z.object({
  data: mapping_MappingRuleSchema,
})

export const mapping_MappingRulesResponseSchema = z.object({
  data: z.array(mapping_MappingRuleSchema),
})

export const mapping_GetFieldWeightsRequestSchema = z.object({
  sourceFields: z.array(z.string()).describe('Source field keys'),
  destinationFields: z.array(z.string()).describe('Destination field keys'),
})

export const mapping_GetEnumWeightsRequestSchema = z.object({
  sourceField: z.string().describe('Source field key'),
  sourceValues: z.array(z.string()).describe('Source field values'),
  destinationField: z.string().describe('Destination field key'),
  destinationValues: z.array(z.string()).describe('Destination field values'),
})

export const mapping_SourceDestinationWeightSchema = z.object({
  source: z.string().describe('Source key'),
  destination: z.string().describe('Destination key'),
  weight: z.number().finite().describe('Weight of the pair'),
})

export const mapping_SourceDestinationWeightsSchema = z.object({
  weights: z.array(mapping_SourceDestinationWeightSchema),
})

export const mapping_SourceDestinationWeightsResponseSchema = z.object({
  data: mapping_SourceDestinationWeightsSchema,
})

export const dataRetentionPolicies_DataRetentionPolicyEnumSchema = z.enum(['lastActivity', 'sinceCreated'])

export const dataRetentionPolicies_DataRetentionPolicyConfigSchema = z.object({
  type: dataRetentionPolicies_DataRetentionPolicyEnumSchema,
  period: z.number().int(),
  environmentId: commons_EnvironmentIdSchema,
})

export const dataRetentionPolicies_DataRetentionPolicySchema = z
  .object({
    id: commons_DataRetentionPolicyIdSchema,
    createdAt: z.string().describe('Date the policy was created'),
    updatedAt: z.string().describe('Date the policy was last updated'),
  })
  .merge(dataRetentionPolicies_DataRetentionPolicyConfigSchema)

export const dataRetentionPolicies_ListDataRetentionPoliciesResponseSchema = z.object({
  data: z.array(dataRetentionPolicies_DataRetentionPolicySchema),
})

export const dataRetentionPolicies_DataRetentionPolicyResponseSchema = z.object({
  data: dataRetentionPolicies_DataRetentionPolicySchema,
})

export const jobs_JobTypeSchema = z.enum([
  'file',
  'workbook',
  'sheet',
  'space',
  'document',
  'app',
  'agent',
  'autobuild',
])

export const jobs_JobSourceSchema = z.string().describe('The id of a file, workbook, sheet, or app')

export const jobs_JobDestinationSchema = commons_WorkbookIdSchema.describe(
  'The id of the workbook where extracted file data will be sent',
)

export const jobs_DeleteRecordsJobConfigSchema = z.object({
  filter: commons_FilterSchema.optional().describe('Options to filter records (default=none)'),
  filterField: commons_FilterFieldSchema
    .optional()
    .describe('Use this to narrow the valid/error filter results to a specific field (Requires filter to be set)'),
  searchValue: commons_SearchValueSchema.optional(),
  searchField: commons_SearchFieldSchema.optional(),
  q: z.string().optional().describe('FFQL query to filter records'),
  sheet: commons_SheetIdSchema,
  exceptions: z.array(commons_RecordIdSchema).optional().describe('List of record ids to exclude from deletion'),
  snapshotLabel: z.string().optional().describe('If specified, a snapshot will be generated with this label'),
})

export const jobs_DriverSchema = z.enum(['csv'])

export const jobs_FileJobConfigSchema = z.object({
  driver: jobs_DriverSchema.describe('The driver to use for extracting data from the file'),
  options: z
    .record(z.string(), z.unknown())
    .optional()
    .describe('The options to use for extracting data from the file'),
  detectedHeaderRow: z
    .number()
    .int()
    .optional()
    .describe('The row number of the header row detected at extraction time'),
})

export const jobs_PipelineJobConfigSchema = z.object({
  sourceSheetId: commons_SheetIdSchema,
  destinationSheetId: commons_SheetIdSchema,
  runbookId: commons_RunbookIdSchema.optional(),
})

export const jobs_ExportOptionsSchema = z.object({
  versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead'),
  commitId: commons_CommitIdSchema
    .optional()
    .describe('If provided, the snapshot version of the workbook will be used for the export'),
  sortField: commons_SortFieldSchema.optional().describe('The field to sort the records on'),
  sortDirection: commons_SortDirectionSchema.optional().describe('The direction to sort the records'),
  filter: commons_FilterSchema.optional().describe('The filter to apply to the records'),
  filterField: commons_FilterFieldSchema.optional().describe('The field to filter on'),
  searchValue: commons_SearchValueSchema.optional().describe('The value to search for'),
  searchField: commons_SearchFieldSchema.optional().describe('The field to search for the search value in'),
  q: z.string().optional().describe('The FFQL query to filter records'),
  ids: z
    .array(commons_RecordIdSchema)
    .optional()
    .describe('The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints al'),
})

export const jobs_ExportJobConfigSchema = z.object({
  options: jobs_ExportOptionsSchema,
})

export const jobs_MutateJobConfigSchema = z.object({
  sheetId: commons_SheetIdSchema,
  mutateRecord: z
    .string()
    .describe('A JavaScript function that will be run on each record in the sheet, it should return a mutated recor'),
  mutationId: z
    .string()
    .optional()
    .describe('If the mutation was generated through some sort of id-ed process, this links this job and that proce'),
  snapshotLabel: z.string().optional().describe('If specified, a snapshot will be generated with this label'),
  snapshotId: z.string().optional().describe('The generated snapshotId will be stored here'),
  filter: commons_FilterSchema.optional(),
  filterField: commons_FilterFieldSchema.optional(),
  searchValue: commons_SearchValueSchema.optional(),
  searchField: commons_SearchFieldSchema.optional(),
  q: z.string().optional(),
  ids: z
    .array(commons_RecordIdSchema)
    .optional()
    .describe('The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints al'),
})

export const jobs_FindAndReplaceJobConfigSchema = z.object({
  filter: commons_FilterSchema.optional().describe('The filter to apply to the records'),
  filterField: commons_FilterFieldSchema.optional().describe('The field to filter on'),
  searchValue: commons_SearchValueSchema.optional().describe('The value to search for'),
  searchField: commons_SearchFieldSchema.optional().describe('The field to search for the search value in'),
  q: z.string().optional().describe('The FFQL query to filter records'),
  ids: z
    .array(commons_RecordIdSchema)
    .optional()
    .describe('The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints al'),
  find: records_CellValueUnionSchema
    .optional()
    .describe('A value to find for a given field in a sheet. Wrap the value in "" for exact match'),
  replace: records_CellValueUnionSchema.optional().describe('The value to replace found values with'),
  fieldKey: z.string().describe('A unique key used to identify a field in a sheet'),
  snapshotLabel: z.string().optional().describe('If specified, a snapshot will be generated with this label'),
})

export const jobs_MappingProgramJobConfigSchema = z.object({
  sourceSheetId: commons_SheetIdSchema,
  destinationSheetId: commons_SheetIdSchema,
  mappingRules: z.array(z.record(z.string(), z.unknown())),
  canRecompute: z.boolean().optional(),
})

export const jobs_AiGenerateBlueprintJobConfigSchema = z.object({
  spaceId: commons_SpaceIdSchema,
  appId: commons_AppIdSchema,
})

export const jobs_AiGenerateSampleDataJobConfigSchema = z.object({
  spaceId: commons_SpaceIdSchema,
  appId: commons_AppIdSchema,
})

export const jobs_AiGenerateBlueprintConstraintsJobConfigSchema = z.object({
  spaceId: commons_SpaceIdSchema,
  workbookId: commons_WorkbookIdSchema,
})

export const jobs_AiGenerateConstraintJobConfigSchema = z.object({
  spaceId: commons_SpaceIdSchema,
  constraints: z.array(property_StoredConstraintSchema),
  description: z.string().optional().describe('A description of what the constraint to be generated should do'),
})

export const jobs_AiRuleCreationJobConfigSchema = z.object({
  label: z.string().optional().describe('Display name for the rule to be created'),
  prompt: z.string().describe('The natural language description of the rule to be created'),
  sheetId: commons_SheetIdSchema.describe('The ID of the sheet containing the field to create/update the rule for'),
  fieldKey: z.string().describe('The key of the field to create/update the rule for'),
  index: z
    .number()
    .int()
    .optional()
    .describe('To edit an existing rule, provide the index of the constraint in the constraints array for the field'),
})

export const jobs_CaptureRoutineJobConfigSchema = z.object({
  sourceJobId: commons_JobIdSchema,
  runbookId: commons_RunbookIdSchema,
})

export const jobs_RunRunbookJobConfigSchema = z.object({
  sourceSheetId: commons_SheetIdSchema,
  runbookId: commons_RunbookIdSchema,
})

export const jobs_MappingFromPreprocessingJobConfigSchema = z.object({
  proposal: z.unknown(),
  mappingJobId: commons_JobIdSchema,
})

export const jobs_EmptyObjectSchema = z.object({})

export const jobs_AddRecordsToDataClipJobConfigSchema = z.object({
  dataClipId: commons_DataClipIdSchema,
  sheetId: commons_SheetIdSchema,
})

export const jobs_UpdateDataClipResolutionsJobConfigSchema = z.object({
  clipId: commons_DataClipIdSchema.describe('The ID of the data clip to resolve'),
  clippedSheetId: commons_SheetIdSchema.describe('The ID of the sheet that contains the data clip'),
  resolveTo: dataClips_ResolveToSchema,
  removedFromMainResolution: dataClips_RemovedFromMainResolutionSchema,
  columnField: z.string().describe('Optional. If provided, only this column will be resolved.'),
  columnValue: z
    .string()
    .describe('Optional. If provided, this value in the column will be replaced with the resolution target.'),
})

export const jobs_AgentExportJobConfigSchema = z.object({
  exportType: agentExports_AgentExportTypeSchema,
})

export const jobs_JobUpdateConfigSchema = z.union([
  jobs_DeleteRecordsJobConfigSchema,
  jobs_FileJobConfigSchema,
  jobs_PipelineJobConfigSchema,
  jobs_ExportJobConfigSchema,
  jobs_MutateJobConfigSchema,
  jobs_FindAndReplaceJobConfigSchema,
  jobs_MappingProgramJobConfigSchema,
  jobs_AiGenerateBlueprintJobConfigSchema,
  jobs_AiGenerateSampleDataJobConfigSchema,
  jobs_AiGenerateBlueprintConstraintsJobConfigSchema,
  jobs_AiGenerateConstraintJobConfigSchema,
  jobs_AiRuleCreationJobConfigSchema,
  jobs_CaptureRoutineJobConfigSchema,
  jobs_RunRunbookJobConfigSchema,
  jobs_MappingFromPreprocessingJobConfigSchema,
  jobs_EmptyObjectSchema,
  jobs_AddRecordsToDataClipJobConfigSchema,
  jobs_UpdateDataClipResolutionsJobConfigSchema,
  jobs_AgentExportJobConfigSchema,
])

export const jobs_TriggerSchema = z.enum(['manual', 'immediate'])

export const jobs_JobStatusSchema = z.enum([
  'created',
  'planning',
  'scheduled',
  'ready',
  'executing',
  'complete',
  'failed',
  'canceled',
  'waiting',
])

export const jobs_JobModeSchema = z.enum(['foreground', 'background', 'toolbarBlocking'])

export const jobs_ResourceJobSubjectSchema = z.object({
  id: z.string(),
})

export const jobs_CollectionJobSubjectSchema = z.object({
  resource: z.string(),
  params: z.record(z.string(), z.unknown()).optional(),
  query: z.record(z.string(), z.unknown()).optional(),
})

export const jobs_JobSubjectSchema = z.union([
  jobs_ResourceJobSubjectSchema.extend({ type: z.literal('resource') }),
  jobs_CollectionJobSubjectSchema.extend({ type: z.literal('collection') }),
])

export const jobs_JobPartExecutionSchema = z.enum(['sequential', 'parallel'])

export const jobs_JobConfigSchema = z.object({
  type: jobs_JobTypeSchema.describe('The type of job'),
  operation: z.string().describe('the type of operation to perform on the data. For example, "export".'),
  source: jobs_JobSourceSchema,
  destination: jobs_JobDestinationSchema.optional(),
  config: jobs_JobUpdateConfigSchema.optional(),
  trigger: jobs_TriggerSchema.optional().describe('the type of trigger to use for this job'),
  status: jobs_JobStatusSchema.optional().describe('the status of the job'),
  progress: z.number().int().optional().describe('the progress of the job. Whole number between 0 and 100'),
  fileId: commons_FileIdSchema.optional(),
  mode: jobs_JobModeSchema.optional().describe('the mode of the job'),
  input: z.record(z.string(), z.unknown()).optional().describe('Input parameters for this job type.'),
  subject: jobs_JobSubjectSchema.optional().describe('Subject parameters for this job type.'),
  outcome: z.record(z.string(), z.unknown()).optional().describe('Outcome summary of job.'),
  info: z.string().optional().describe('Current status of job in text'),
  managed: z
    .boolean()
    .optional()
    .describe('Indicates if Flatfile is managing the control flow of this job or if it is being manually tracked.'),
  environmentId: commons_EnvironmentIdSchema.optional().describe('The id of the environment this job belongs to'),
  part: z.number().int().optional().describe('The part number of this job'),
  partData: z.record(z.string(), z.unknown()).optional().describe('The data for this part of the job'),
  partExecution: jobs_JobPartExecutionSchema.optional().describe('The execution mode for this part of the job'),
  parentId: commons_JobIdSchema.optional().describe('The id of the parent job'),
  predecessorIds: z
    .array(commons_JobIdSchema)
    .optional()
    .describe('The ids of the jobs that must complete before this job can start'),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Additional metadata for the job'),
})

export const jobs_JobSchema = z
  .object({
    id: commons_JobIdSchema,
    createdBy: commons_ActorIdSchema.describe('The user, guest, or agent who created the job'),
    createdAt: z.string().describe('Date the item was created'),
    updatedAt: z.string().describe('Date the item was last updated'),
    startedAt: z.string().optional().describe('the time that the job started at'),
    finishedAt: z.string().optional().describe('the time that the job finished at'),
    outcomeAcknowledgedAt: z
      .string()
      .optional()
      .describe("the time that the job's outcome has been acknowledged by a user"),
  })
  .merge(jobs_JobConfigSchema)

export const jobs_ListJobsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(jobs_JobSchema),
})

export const jobs_JobResponseSchema = z.object({
  data: jobs_JobSchema,
})

export const jobs_EnumValueSchema = z.union([z.string(), z.number().int(), z.boolean()])

export const jobs_CategoryMappingSchema = z.object({
  sourceValue: jobs_EnumValueSchema.optional().describe('The source value to map from'),
  destinationValue: jobs_EnumValueSchema.optional().describe('The destination value to map to'),
})

export const jobs_EnumDetailsSchema = z.object({
  mapping: z.array(jobs_CategoryMappingSchema).describe('The mapping of source values to destination values'),
  unusedSourceValues: z
    .array(jobs_EnumValueSchema)
    .optional()
    .describe('A list of source values that are not mapped from'),
  unusedDestinationValues: z
    .array(jobs_EnumValueSchema)
    .optional()
    .describe('A list of destination values that are not mapped to'),
})

export const jobs_CertaintySchema = z.enum(['absolute', 'strong', 'moderate', 'weak'])

export const jobs_MetadataSchema = z.object({
  certainty: jobs_CertaintySchema.optional(),
  confidence: z.number().finite().optional(),
  source: z.string().optional(),
  detectedDelimiter: z.string().optional(),
})

export const jobs_EdgeSchema = z.object({
  sourceField: property_PropertySchema.describe('The description of the source field'),
  destinationField: property_PropertySchema.describe('The description of the destination field'),
  preview: z.array(z.string()).optional().describe('A list of preview values of the data in the destination field'),
  enumDetails: jobs_EnumDetailsSchema
    .optional()
    .describe('Only available if one or more of the destination fields is of type enum. Provides category mapping.'),
  metadata: jobs_MetadataSchema.optional().describe('Metadata about the edge'),
})

export const jobs_SourceFieldSchema = z.object({
  sourceField: property_PropertySchema.describe('The description of the source field'),
  preview: z.array(z.string()).optional().describe('A list of preview values of the data in the source field'),
})

export const jobs_DestinationFieldSchema = z.object({
  destinationField: property_PropertySchema.describe('The description of the destination field'),
  preview: z.array(z.string()).optional().describe('A list of preview values of the data in the destination field'),
})

export const jobs_JobExecutionPlanSchema = z.object({
  fieldMapping: z.array(jobs_EdgeSchema),
  unmappedSourceFields: z.array(jobs_SourceFieldSchema),
  unmappedDestinationFields: z.array(jobs_DestinationFieldSchema),
  programId: z.string().optional(),
})

export const jobs_JobPlanSchema = z.object({
  job: jobs_JobSchema,
  plan: jobs_JobExecutionPlanSchema,
})

export const jobs_JobPlanResponseSchema = z.object({
  data: jobs_JobPlanSchema,
})

export const jobs_JobUpdateSchema = z.object({
  config: jobs_JobUpdateConfigSchema.optional(),
  status: jobs_JobStatusSchema.optional().describe('the status of the job'),
  progress: z.number().int().optional().describe('the progress of the job. Whole number between 0 and 100'),
  outcomeAcknowledgedAt: z
    .string()
    .optional()
    .describe("the time that the job's outcome has been acknowledged by a user"),
  info: z.string().optional().describe('Current status of job in text'),
  metadata: z.record(z.string(), z.unknown()).optional().describe('Additional metadata for the job'),
})

export const jobs_TransformationProgramJobConfigSchema = z.object({
  programId: commons_ProgramIdSchema,
})

export const jobs_JobSubjectTypeSchema = z.enum(['resource', 'collection'])

export const jobs_JobPlanObjectSchema = z.object({
  data: jobs_JobPlanSchema,
})

export const jobs_JobExecutionPlanRequestSchema = z
  .object({
    fileId: commons_FileIdSchema,
    jobId: commons_JobIdSchema,
  })
  .merge(jobs_JobExecutionPlanSchema)

export const jobs_JobExecutionPlanConfigSchema = z.object({
  fieldMapping: z.array(jobs_EdgeSchema).optional(),
  unmappedSourceFields: z.array(jobs_SourceFieldSchema).optional(),
  unmappedDestinationFields: z.array(jobs_DestinationFieldSchema).optional(),
  programId: z.string().optional(),
})

export const jobs_JobExecutionPlanConfigRequestSchema = z
  .object({
    fileId: commons_FileIdSchema,
    jobId: commons_JobIdSchema,
  })
  .merge(jobs_JobExecutionPlanConfigSchema)

export const jobs_JobAckDetailsSchema = z.object({
  info: z.string().optional(),
  progress: z.number().int().optional().describe('the progress of the job. Whole number between 0 and 100'),
  estimatedCompletionAt: z.string().optional(),
})

export const jobs_JobOutcomeTriggerTypeSchema = z.enum(['manual', 'automatic', 'automatic_silent'])

export const jobs_JobOutcomeTriggerAudienceSchema = z.enum(['originator', 'all'])

export const jobs_JobOutcomeTriggerDetailsSchema = z.object({
  type: jobs_JobOutcomeTriggerTypeSchema,
  audience: jobs_JobOutcomeTriggerAudienceSchema.optional(),
})

export const jobs_JobOutcomeTriggerSchema = z.union([
  jobs_JobOutcomeTriggerTypeSchema,
  jobs_JobOutcomeTriggerDetailsSchema,
])

export const jobs_JobOutcomeNextIdSchema = z.object({
  id: z.string(),
  label: z.string().optional(),
  path: z.string().optional(),
  query: z.string().optional(),
})

export const jobs_JobOutcomeNextUrlSchema = z.object({
  url: z.string(),
  label: z.string().optional(),
})

export const jobs_JobOutcomeNextDownloadSchema = z.object({
  url: z.string(),
  label: z.string().optional(),
  fileName: z.string().optional(),
})

export const jobs_JobOutcomeNextFileObjectSchema = z.object({
  fileId: z.string(),
  label: z.string().optional(),
})

export const jobs_JobOutcomeNextFilesSchema = z.object({
  files: z.array(jobs_JobOutcomeNextFileObjectSchema),
  label: z.string().optional(),
})

export const jobs_JobOutcomeNextWaitSchema = z.object({
  fade: z.boolean().optional(),
  confetti: z.boolean().optional(),
})

export const jobs_JobOutcomeNextSnapshotSchema = z.object({
  snapshotId: z.string(),
  sheetId: z.string(),
})

export const jobs_JobOutcomeNextRetrySchema = z.object({
  label: z.string().optional(),
})

export const jobs_JobOutcomeNextViewSchema = z.object({
  sheetId: z.string(),
  hiddenColumns: z.array(z.string()).describe('An array of field keys from the sheet'),
  label: z.string().optional(),
})

export const jobs_JobOutcomeNextSchema = z.union([
  jobs_JobOutcomeNextIdSchema.extend({ type: z.literal('id') }),
  jobs_JobOutcomeNextUrlSchema.extend({ type: z.literal('url') }),
  jobs_JobOutcomeNextDownloadSchema.extend({ type: z.literal('download') }),
  jobs_JobOutcomeNextFilesSchema.extend({ type: z.literal('files') }),
  jobs_JobOutcomeNextWaitSchema.extend({ type: z.literal('wait') }),
  jobs_JobOutcomeNextSnapshotSchema.extend({ type: z.literal('snapshot') }),
  jobs_JobOutcomeNextRetrySchema.extend({ type: z.literal('retry') }),
  jobs_JobOutcomeNextViewSchema.extend({ type: z.literal('view') }),
])

export const jobs_JobOutcomeSchema = z.object({
  acknowledge: z.boolean().optional(),
  trigger: jobs_JobOutcomeTriggerSchema.optional(),
  buttonText: z.string().optional(),
  next: jobs_JobOutcomeNextSchema.optional(),
  heading: z.string().optional(),
  message: z.string().optional(),
  hideDefaultButton: z.boolean().optional(),
})

export const jobs_JobCompleteDetailsSchema = z.object({
  outcome: jobs_JobOutcomeSchema.optional(),
  info: z.string().optional(),
})

export const jobs_JobCancelDetailsSchema = z.object({
  info: z.string().optional(),
})

export const jobs_JobPartsArraySchema = z
  .array(z.record(z.string(), z.unknown()))
  .describe('Data for each of the job parts')

export const jobs_JobPartsSchema = z.union([z.number().int(), jobs_JobPartsArraySchema])

export const jobs_JobSplitDetailsSchema = z.object({
  parts: jobs_JobPartsSchema,
  runInParallel: z.boolean().optional(),
})

export const views_ViewConfigSchema = z.object({
  versionId: commons_VersionIdSchema.optional().describe('Deprecated, use `commitId` instead.'),
  commitId: commons_CommitIdSchema.optional(),
  sinceVersionId: commons_VersionIdSchema.optional().describe('Deprecated, use `sinceCommitId` instead.'),
  sinceCommitId: commons_CommitIdSchema.optional(),
  sortField: commons_SortFieldSchema.optional(),
  sortDirection: commons_SortDirectionSchema.optional(),
  filter: commons_FilterSchema.optional(),
  filterField: commons_FilterFieldSchema.optional().describe('Name of field by which to filter records'),
  searchValue: commons_SearchValueSchema.optional(),
  searchField: commons_SearchFieldSchema.optional(),
  ids: z
    .array(commons_RecordIdSchema)
    .optional()
    .describe('The Record Ids param (ids) is a list of record ids that can be passed to several record endpoints al'),
  pageSize: z.number().int().optional().describe('Number of records to return in a page (default 10,000)'),
  pageNumber: z
    .number()
    .int()
    .optional()
    .describe('Based on pageSize, which page of records to return (Note - numbers start at 1)'),
  includeCounts: z.boolean().optional().describe('**DEPRECATED** Use GET /sheets/:sheetId/counts'),
  includeLength: z.boolean().optional().describe('The length of the record result set, returned as counts.total'),
  includeLinks: z
    .boolean()
    .optional()
    .describe('If true, linked records will be included in the results. Defaults to false.'),
  includeMessages: z.boolean().optional().describe('Include error messages, defaults to false.'),
  for: commons_EventIdSchema
    .optional()
    .describe('if "for" is provided, the query parameters will be pulled from the event payload'),
  q: z.string().optional().describe('An FFQL query used to filter the result set'),
})

export const views_ViewSchema = z.object({
  id: commons_ViewIdSchema.describe('The ID of the view'),
  sheetId: commons_SheetIdSchema.describe('The associated sheet ID of the view'),
  name: z.string().describe('The name of the view'),
  config: views_ViewConfigSchema.describe('The view filters of the view'),
  createdBy: z.string().describe('ID of the actor who created the view'),
})

export const views_ListViewsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(views_ViewSchema),
})

export const views_ViewResponseSchema = z.object({
  data: views_ViewSchema,
})

export const views_ViewCreateSchema = z.object({
  sheetId: commons_SheetIdSchema,
  name: z.string(),
  config: views_ViewConfigSchema,
})

export const views_ViewUpdateSchema = z.object({
  name: z.string().optional(),
  config: views_ViewConfigSchema,
})

export const files_ModelFileStatusEnumSchema = z.enum([
  'partial',
  'analyzing',
  'analyzed',
  'complete',
  'archived',
  'purged',
  'failed',
])

export const files_ModeSchema = z.enum(['import', 'export'])

export const files_FileOriginSchema = z.enum(['filesystem', 'googledrive', 'box', 'onedrive'])

export const files_FileSchema = z.object({
  id: commons_FileIdSchema,
  name: z.string().describe('Original filename'),
  description: z.string().optional().describe('Description of the file'),
  ext: z.string().describe('Extension of the file'),
  mimetype: z.string().describe('MIME Type of the file'),
  encoding: z.string().describe('Text encoding of the file'),
  status: files_ModelFileStatusEnumSchema,
  mode: files_ModeSchema.optional().describe('The storage mode of file'),
  size: z.number().int().describe('Size of file in bytes'),
  bytesReceived: z
    .number()
    .int()
    .describe('Number of bytes that have been uploaded so far (useful for progress tracking)'),
  createdAt: z.string().describe('Date the file was created'),
  updatedAt: z.string().describe('Date the file was last updated'),
  expiredAt: z.string().optional().describe('Date the file was expired'),
  spaceId: commons_SpaceIdSchema,
  workbookId: commons_WorkbookIdSchema.optional(),
  sheetId: commons_SheetIdSchema.optional(),
  actions: z.array(commons_ActionSchema).optional(),
  origin: files_FileOriginSchema.optional(),
})

export const files_ListFilesResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(files_FileSchema),
})

export const files_FileResponseSchema = z.object({
  data: files_FileSchema,
})

export const frontegg_FronteggUserRequestSchema = z.object({
  id: z.string().describe('Frontegg user id (User IDP Ref in Flatfile)'),
  email: z.string().describe("User's email"),
  verified: z.boolean().optional().describe("User's email verification status"),
  roles: z
    .array(z.string())
    .describe("User's Frontegg assigned roles. These roles are generally ignored unless the account has the idpRol"),
  name: z.string().optional().describe("User's name (Nullable, not truly optional)"),
  provider: z
    .string()
    .describe('The identity provider used via Frontegg. "local" means the data is from Frontegg\'s own database.'),
  tenantId: z.string().describe('Frontegg tenant id - current active; Store as account.idpRef in Flatfile.'),
  tenantIds: z.array(z.string()).describe('Frontegg tenant ids. A user could be a member of multiple tenants.'),
  metadata: z.string().optional().describe('JSON stringified object of user metadata.'),
})

export const foreigndb_UploadToObjectStorageRequestSchema = z.object({
  fileId: z.string().describe('the ID of the file to send to object storage'),
})

export const foreigndb_RestoreDatabaseRequestSchema = z.object({
  fileId: z.string().describe('the fileId of the backup to be restored'),
})

export const foreigndb_RestoreDatabaseResponseSchema = z.object({
  host: z.string().describe('the host to the restored database'),
  port: z.number().int().describe('the port to the restored database'),
  dbname: z.string().describe('the database name to the restored database'),
})

export const foreigndb_DatabaseTaskSchema = z.object({
  status: z.string().describe('The task status'),
  type: z.string().describe('The task type'),
  progress: z.number().int().describe('The task progress'),
})

export const foreigndb_GetDatabaseResponseSchema = z.object({
  task: foreigndb_DatabaseTaskSchema,
})

export const foreigndb_GetDatabaseUserResponseSchema = z.object({
  username: z.string().describe('the database user username'),
  password: z.string().describe('the database user password'),
})

export const assistant_GenerateMutationConfigSchema = z.object({
  sheetId: commons_SheetIdSchema,
  command: z.string(),
  model: z.string().optional(),
  modelParams: z.record(z.string(), z.unknown()).optional(),
  templateVariables: z.record(z.string(), z.unknown()).optional(),
})

export const assistant_GeneratedMutationMetadataSchema = z.object({
  explain: z.string(),
})

export const assistant_GeneratedMutationSchema = z.object({
  mutateRecord: z.string(),
  metadata: assistant_GeneratedMutationMetadataSchema,
  mutationId: z.string(),
})

export const assistant_GeneratedMutationResponseSchema = z.object({
  data: assistant_GeneratedMutationSchema,
})

export const assistant_GenerateQueryConfigSchema = z.object({
  sheetId: commons_SheetIdSchema,
  command: z.string(),
  model: z.string().optional(),
  modelParams: z.record(z.string(), z.unknown()).optional(),
  queryType: z.string().optional(),
  templateVariables: z.record(z.string(), z.unknown()).optional(),
})

export const assistant_GeneratedQueryMetadataSchema = z.object({
  explain: z.string(),
})

export const assistant_GeneratedQuerySchema = z.object({
  query: z.string(),
  queryType: z.string(),
  queryId: z.string(),
  metadata: assistant_GeneratedQueryMetadataSchema,
})

export const assistant_GeneratedQueryResponseSchema = z.object({
  data: assistant_GeneratedQuerySchema,
})

export const assistant_PromptTypeEnumSchema = z.enum(['AI_ASSIST', 'CONSTRAINT_GENERATION'])

export const assistant_PromptSchema = z.object({
  id: commons_PromptIdSchema,
  createdById: z.string().describe('ID of the user/guest who created the prompt'),
  accountId: commons_AccountIdSchema,
  environmentId: commons_EnvironmentIdSchema.optional(),
  spaceId: commons_SpaceIdSchema.optional(),
  promptType: assistant_PromptTypeEnumSchema.describe('Type of prompt'),
  prompt: z.string().describe('Text for prompts for AI Assist'),
  createdAt: z.string(),
  updatedAt: z.string(),
  deletedAt: z.string().optional(),
})

export const assistant_PromptsResponseSchema = z.object({
  pagination: commons_PaginationSchema.optional(),
  data: z.array(assistant_PromptSchema),
})

export const assistant_PromptResponseSchema = z.object({
  data: assistant_PromptSchema,
})

export const assistant_PromptPatchSchema = z.object({
  prompt: z.string(),
})

export const assistant_PromptCreateSchema = z.object({
  promptType: assistant_PromptTypeEnumSchema.optional().describe('Type of prompt; Defaults to AI_ASSIST'),
  prompt: z.string(),
  environmentId: commons_EnvironmentIdSchema,
  spaceId: commons_SpaceIdSchema,
})

export const assistant_PromptTypeQueryEnumSchema = z.enum(['ALL', 'AI_ASSIST', 'CONSTRAINT_GENERATION'])

export const cells_CellValueWithCountsDeprecatedSchema = z
  .object({
    counts: records_RecordCountsSchema.optional(),
  })
  .merge(records_CellValueSchema)

export const cells_CellsResponseDataDeprecatedSchema = z
  .record(z.string(), z.array(cells_CellValueWithCountsDeprecatedSchema))
  .describe('Cell values grouped by field key')

export const cells_CellsResponseDeprecatedSchema = z.object({
  data: cells_CellsResponseDataDeprecatedSchema,
})

export const cells_FieldKeyDeprecatedSchema = z
  .string()
  .describe('Returns results from the given field only. Otherwise all field cells are returned')

export const cells_DistinctDeprecatedSchema = z.boolean().describe('When true, excludes duplicate values')

export const cells_IncludeCountsDeprecatedSchema = z
  .boolean()
  .describe('When both distinct and includeCounts are true, the count of distinctdeprecated field values will be ')

export const entitlements_EntitlementSchema = z.object({
  key: z.string().describe('Short name for the entitlement'),
  metadata: z.unknown().describe('Contains conditions or limits for an entitlement'),
})

export const entitlements_ListEntitlementsResponseSchema = z.object({
  data: z.array(entitlements_EntitlementSchema),
})

export const apps_AppTypeSchema = z.enum(['PORTAL', 'PROJECTS', 'MAPPING', 'WORKBOOKS', 'CUSTOM'])

export const apps_AppSchema = z.object({
  id: commons_AppIdSchema,
  name: z.string(),
  namespace: z.string(),
  type: apps_AppTypeSchema,
  entity: z.string(),
  entityPlural: z.string(),
  icon: z.string().optional(),
  metadata: z.unknown(),
  environmentFilters: z.unknown(),
  blueprint: z.unknown().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
  deletedAt: z.string().optional(),
  activatedAt: z.string().optional(),
})

export const apps_AppsResponseSchema = z.object({
  data: z.array(apps_AppSchema),
})

export const apps_AppResponseSchema = z.object({
  data: apps_AppSchema,
})

export const apps_AppAutobuildTypeSchema = z.enum(['FILE', 'FIELDS', 'PROMPT', 'COMBINED', 'EMPTY'])

export const apps_AppAutobuildSchema = z.object({
  id: commons_AppAutobuildIdSchema,
  type: apps_AppAutobuildTypeSchema.describe('The type of the autobuild configuration'),
  fileName: z.string().optional().describe('Original filename'),
  fileExt: z.string().optional().describe('Extension of the file'),
  fileMimetype: z.string().optional().describe('MIME Type of the file'),
  fileEncoding: z.string().optional().describe('Text encoding of the file'),
  fileSize: z.number().int().optional().describe('Size of file in bytes'),
  fields: z.string().optional().describe('Field names used to initialize autobuild'),
  prompt: z.string().optional().describe('Prompt used to initialize autobuild'),
})

export const apps_AppAutobuildResponseSchema = z.object({
  data: apps_AppAutobuildSchema,
})

export const apps_AppPatchSchema = z.object({
  name: z.string().optional(),
  namespace: z.string().optional(),
  entity: z.string().optional(),
  entityPlural: z.string().optional(),
  icon: z.string().optional(),
  metadata: z.unknown().optional(),
  environmentFilters: z.unknown().optional(),
  blueprint: z.unknown().optional(),
  activatedAt: z.string().optional(),
})

export const apps_AppCreateSchema = z.object({
  name: z.string(),
  namespace: z.string(),
  type: apps_AppTypeSchema,
  entity: z.string().optional(),
  entityPlural: z.string().optional(),
  icon: z.string().optional(),
  metadata: z.unknown().optional(),
  environmentFilters: z.unknown().optional(),
  blueprint: z.unknown().optional(),
})

export const apps_EnvironmentFilterTypeSchema = z.enum(['PROD', 'DEV'])

export const apps_EnvironmentFiltersSchema = z.object({
  type: z.array(apps_EnvironmentFilterTypeSchema).optional(),
  exclude_ids: z.array(z.string()).optional(),
})

export const apps_SuccessResponseSchema = z.object({
  success: z.boolean(),
})

export const apps_ConstraintResourceSchema = z.object({
  id: commons_ConstraintIdSchema,
  appId: commons_AppIdSchema,
  validator: z.string(),
  description: z.string().optional(),
  function: z.string().optional(),
  options: z.unknown().optional(),
  label: z.string().optional(),
  createdAt: z.string(),
  updatedAt: z.string(),
})

export const apps_ConstraintsResponseSchema = z.object({
  data: z.array(apps_ConstraintResourceSchema),
})

export const apps_ConstraintResponseSchema = z.object({
  data: apps_ConstraintResourceSchema,
})

export const apps_ConstraintVersionResourceSchema = z
  .object({
    version: z.number().int(),
    prompt: z.string().optional(),
  })
  .merge(apps_ConstraintResourceSchema)

export const apps_ConstraintVersionsResponseSchema = z.object({
  data: z.array(apps_ConstraintVersionResourceSchema),
})

export const apps_ConstraintVersionResponseSchema = z.object({
  data: apps_ConstraintVersionResourceSchema,
})

export const apps_ConstraintCreateSchema = z.object({
  description: z.string().optional(),
  function: z.string().optional(),
  options: z.unknown().optional(),
  label: z.string().optional(),
  validator: z.string().optional(),
  appId: commons_AppIdSchema.optional(),
})

export const apps_ConstraintUpdateSchema = z.object({
  description: z.string().optional(),
  function: z.string().optional(),
  options: z.unknown().optional(),
  label: z.string().optional(),
})

export const actions_APIActionConfigsSchema = z.array(commons_APIActionConfigSchema)

export const actions_APIActionResponseSchema = z.object({
  data: commons_APIActionSchema,
})

export const actions_APIActionsResponseSchema = z.array(commons_APIActionSchema)

export const threads_ThreadStatusSchema = z.enum(['ready', 'active', 'error'])

export const threads_StateUpdateStrategySchema = z.enum(['upsert', 'replace'])

export const threads_ThreadMetadataSchema = z
  .record(z.string(), z.unknown())
  .describe('Additional metadata for the thread')

export const threads_ThreadStateSchema = z.record(z.string(), z.unknown()).describe('Persistent state for the thread')

export const threads_ThreadModelSchema = z.object({
  id: commons_ThreadIdSchema,
  resourceId: z.string().describe('The resource ID this thread is associated with'),
  metadata: threads_ThreadMetadataSchema.optional().describe('Additional metadata associated with the thread'),
  source: z.string().optional().describe('The source/origin of this thread'),
  state: threads_ThreadStateSchema.optional().describe('Persistent state for the thread'),
  status: threads_ThreadStatusSchema.describe('Current status of the thread'),
  createdAt: z.string().describe('When the thread was created'),
  updatedAt: z.string().describe('When the thread was last updated'),
})

export const threads_ThreadApiCreateDataSchema = z.object({
  resourceId: z.string().describe('The resource ID this thread is associated with'),
  metadata: threads_ThreadMetadataSchema.optional().describe('Additional metadata for the thread'),
  source: z.string().optional().describe('The source/origin of this thread'),
  state: threads_ThreadStateSchema.optional().describe('Persistent state for the thread'),
  status: threads_ThreadStatusSchema.describe('Initial status of the thread'),
})

export const threads_ThreadApiUpdateDataSchema = z.object({
  resourceId: z.string().optional().describe('Updated resource ID'),
  metadata: threads_ThreadMetadataSchema.optional().describe('Updated metadata'),
  source: z.string().optional().describe('Updated source'),
  state: threads_ThreadStateSchema.optional().describe('Updated state information'),
  status: threads_ThreadStatusSchema.optional().describe('Updated thread status'),
  stateUpdateStrategy: threads_StateUpdateStrategySchema
    .optional()
    .describe('Strategy to use when updating state (defaults to upsert)'),
})

export const threads_ThreadCollectionSchema = z.object({
  data: z.array(threads_ThreadModelSchema),
})

export const threads_ThreadResponseSchema = z.object({
  data: threads_ThreadModelSchema,
})

export const health_HealthSuccessEnumSchema = z.enum(['ok'])

export const health_HealthResponseSchema = z.object({
  status: health_HealthSuccessEnumSchema.describe('ok'),
})

export const health_AppVersionResponseSchema = z.object({
  commit: z.string().describe('The git commit hash of the build'),
  version: z.string().describe('The semantic version of the build'),
})

export const routines_RoutineTypeSchema = z.enum(['JOB'])

export const routines_RoutineSchema = z.object({
  id: commons_RoutineIdSchema.describe('The ID of the Routine.'),
  runbookId: commons_RunbookIdSchema,
  name: z.string().describe('The name of the Routine.'),
  config: z.unknown().describe('Configuration for the Routine. Related to the type of Routine.'),
  ordinal: z.number().int().describe('The order of the Routine in the Runbook.'),
  type: routines_RoutineTypeSchema.describe('The type of Routine.'),
  createdBy: z.string().describe('The entity which created the Runbook.'),
  createdAt: z.string().describe('Date the sheet was created'),
  updatedAt: z.string().describe('Date the sheet was last updated'),
})

export const routines_RoutinesResponseSchema = z.object({
  data: z.array(routines_RoutineSchema),
})

export const routines_RoutineResponseSchema = z.object({
  data: routines_RoutineSchema,
})

export const routines_CreateRoutineRequestSchema = z.object({
  runbookId: commons_RunbookIdSchema,
  name: z.string().describe('The name of the Routine.'),
  config: z.unknown().describe('Configuration for the Routine. Related to the type of Routine.'),
  ordinal: z.number().int().describe('The order of the Routine in the Runbook.'),
  type: routines_RoutineTypeSchema.describe('The type of Routine.'),
})

export const routines_UpdateRoutineRequestSchema = z.object({
  name: z.string().describe('The name of the Routine.'),
  config: z.unknown().describe('Configuration for the Routine. Related to the type of Routine.'),
  ordinal: z.number().int().describe('The order of the Routine in the Runbook.'),
  type: routines_RoutineTypeSchema.describe('The type of Routine.'),
})

// TypeScript type definitions
export type commons_AgentId = z.infer<typeof commons_AgentIdSchema>
export type commons_AgentExportId = z.infer<typeof commons_AgentExportIdSchema>
export type commons_AgentVersionId = z.infer<typeof commons_AgentVersionIdSchema>
export type commons_AccountId = z.infer<typeof commons_AccountIdSchema>
export type commons_ActorId = z.infer<typeof commons_ActorIdSchema>
export type commons_AppId = z.infer<typeof commons_AppIdSchema>
export type commons_AppAutobuildId = z.infer<typeof commons_AppAutobuildIdSchema>
export type commons_CalculationId = z.infer<typeof commons_CalculationIdSchema>
export type commons_CanvasId = z.infer<typeof commons_CanvasIdSchema>
export type commons_CanvasAreaId = z.infer<typeof commons_CanvasAreaIdSchema>
export type commons_ConstraintId = z.infer<typeof commons_ConstraintIdSchema>
export type commons_DataClipId = z.infer<typeof commons_DataClipIdSchema>
export type commons_DocumentId = z.infer<typeof commons_DocumentIdSchema>
export type commons_GuestId = z.infer<typeof commons_GuestIdSchema>
export type commons_EnvironmentId = z.infer<typeof commons_EnvironmentIdSchema>
export type commons_FileId = z.infer<typeof commons_FileIdSchema>
export type commons_SpaceId = z.infer<typeof commons_SpaceIdSchema>
export type commons_WorkbookId = z.infer<typeof commons_WorkbookIdSchema>
export type commons_EventId = z.infer<typeof commons_EventIdSchema>
export type commons_SheetId = z.infer<typeof commons_SheetIdSchema>
export type commons_SnapshotId = z.infer<typeof commons_SnapshotIdSchema>
export type commons_CommitId = z.infer<typeof commons_CommitIdSchema>
export type commons_VersionId = z.infer<typeof commons_VersionIdSchema>
export type commons_JobId = z.infer<typeof commons_JobIdSchema>
export type commons_UserId = z.infer<typeof commons_UserIdSchema>
export type commons_ActorRoleId = z.infer<typeof commons_ActorRoleIdSchema>
export type commons_ActorIdUnion = z.infer<typeof commons_ActorIdUnionSchema>
export type commons_RoleId = z.infer<typeof commons_RoleIdSchema>
export type commons_SpaceConfigId = z.infer<typeof commons_SpaceConfigIdSchema>
export type commons_RecordId = z.infer<typeof commons_RecordIdSchema>
export type commons_SecretId = z.infer<typeof commons_SecretIdSchema>
export type commons_FieldId = z.infer<typeof commons_FieldIdSchema>
export type commons_BillingSubscriptionId = z.infer<typeof commons_BillingSubscriptionIdSchema>
export type commons_MappingId = z.infer<typeof commons_MappingIdSchema>
export type commons_ProgramId = z.infer<typeof commons_ProgramIdSchema>
export type commons_FamilyId = z.infer<typeof commons_FamilyIdSchema>
export type commons_PromptId = z.infer<typeof commons_PromptIdSchema>
export type commons_ViewId = z.infer<typeof commons_ViewIdSchema>
export type commons_ActionId = z.infer<typeof commons_ActionIdSchema>
export type commons_GuideId = z.infer<typeof commons_GuideIdSchema>
export type commons_GuidanceId = z.infer<typeof commons_GuidanceIdSchema>
export type commons_DataRetentionPolicyId = z.infer<typeof commons_DataRetentionPolicyIdSchema>
export type commons_RunbookId = z.infer<typeof commons_RunbookIdSchema>
export type commons_RoutineId = z.infer<typeof commons_RoutineIdSchema>
export type commons_ThreadId = z.infer<typeof commons_ThreadIdSchema>
export type commons_MessageId = z.infer<typeof commons_MessageIdSchema>
export type commons_Pagination = z.infer<typeof commons_PaginationSchema>
export type commons_PageSize = z.infer<typeof commons_PageSizeSchema>
export type commons_PageNumber = z.infer<typeof commons_PageNumberSchema>
export type commons_Start = z.infer<typeof commons_StartSchema>
export type commons_End = z.infer<typeof commons_EndSchema>
export type commons_SuccessQueryParameter = z.infer<typeof commons_SuccessQueryParameterSchema>
export type commons_Guide = z.infer<typeof commons_GuideSchema>
export type commons_Guardrail = z.infer<typeof commons_GuardrailSchema>
export type commons_ActionMode = z.infer<typeof commons_ActionModeSchema>
export type commons_ActionMessageType = z.infer<typeof commons_ActionMessageTypeSchema>
export type commons_ActionMessage = z.infer<typeof commons_ActionMessageSchema>
export type commons_ActionSchedule = z.infer<typeof commons_ActionScheduleSchema>
export type commons_InputFormType = z.infer<typeof commons_InputFormTypeSchema>
export type commons_InputEnumPropertyOption = z.infer<typeof commons_InputEnumPropertyOptionSchema>
export type commons_InputConfig = z.infer<typeof commons_InputConfigSchema>
export type commons_InputConstraintType = z.infer<typeof commons_InputConstraintTypeSchema>
export type commons_InputConstraint = z.infer<typeof commons_InputConstraintSchema>
export type commons_InputField = z.infer<typeof commons_InputFieldSchema>
export type commons_InputForm = z.infer<typeof commons_InputFormSchema>
export type commons_ActionConstraintHasAllValid = z.infer<typeof commons_ActionConstraintHasAllValidSchema>
export type commons_ActionConstraintHasSelection = z.infer<typeof commons_ActionConstraintHasSelectionSchema>
export type commons_ActionConstraintHasData = z.infer<typeof commons_ActionConstraintHasDataSchema>
export type commons_ActionConstraintHasColumnEnabled = z.infer<typeof commons_ActionConstraintHasColumnEnabledSchema>
export type commons_ActionConstraint = z.infer<typeof commons_ActionConstraintSchema>
export type commons_ActionMountSheet = z.infer<typeof commons_ActionMountSheetSchema>
export type commons_ActionMountWorkbook = z.infer<typeof commons_ActionMountWorkbookSchema>
export type commons_ActionMountField = z.infer<typeof commons_ActionMountFieldSchema>
export type commons_ActionMountDocument = z.infer<typeof commons_ActionMountDocumentSchema>
export type commons_ActionMountFile = z.infer<typeof commons_ActionMountFileSchema>
export type commons_ActionMount = z.infer<typeof commons_ActionMountSchema>
export type commons_ActionWithoutLabel = z.infer<typeof commons_ActionWithoutLabelSchema>
export type commons_Action = z.infer<typeof commons_ActionSchema>
export type commons_APIAction = z.infer<typeof commons_APIActionSchema>
export type commons_APIActionConfig = z.infer<typeof commons_APIActionConfigSchema>
export type commons_ActionUpdate = z.infer<typeof commons_ActionUpdateSchema>
export type commons_ActionConstraintType = z.infer<typeof commons_ActionConstraintTypeSchema>
export type commons_ResourceType = z.infer<typeof commons_ResourceTypeSchema>
export type commons_ActorType = z.infer<typeof commons_ActorTypeSchema>
export type commons_SortDirection = z.infer<typeof commons_SortDirectionSchema>
export type commons_SuccessData = z.infer<typeof commons_SuccessDataSchema>
export type commons_Success = z.infer<typeof commons_SuccessSchema>
export type commons_Error = z.infer<typeof commons_ErrorSchema>
export type commons_Errors = z.infer<typeof commons_ErrorsSchema>
export type commons_Filter = z.infer<typeof commons_FilterSchema>
export type commons_FilterField = z.infer<typeof commons_FilterFieldSchema>
export type commons_SearchField = z.infer<typeof commons_SearchFieldSchema>
export type commons_SearchValue = z.infer<typeof commons_SearchValueSchema>
export type commons_SortField = z.infer<typeof commons_SortFieldSchema>
export type commons_AccessToken = z.infer<typeof commons_AccessTokenSchema>
export type commons_JSONPathString = z.infer<typeof commons_JSONPathStringSchema>
export type property_StringConfigOptions = z.infer<typeof property_StringConfigOptionsSchema>
export type property_StringConfig = z.infer<typeof property_StringConfigSchema>
export type property_UniqueConstraintConfig = z.infer<typeof property_UniqueConstraintConfigSchema>
export type property_UniqueConstraint = z.infer<typeof property_UniqueConstraintSchema>
export type property_ExternalConstraint = z.infer<typeof property_ExternalConstraintSchema>
export type property_StoredConstraint = z.infer<typeof property_StoredConstraintSchema>
export type property_Constraint = z.infer<typeof property_ConstraintSchema>
export type property_FieldSize = z.infer<typeof property_FieldSizeSchema>
export type property_FieldAppearance = z.infer<typeof property_FieldAppearanceSchema>
export type property_BaseProperty = z.infer<typeof property_BasePropertySchema>
export type property_StringProperty = z.infer<typeof property_StringPropertySchema>
export type property_NumberConfig = z.infer<typeof property_NumberConfigSchema>
export type property_ArrayableProperty = z.infer<typeof property_ArrayablePropertySchema>
export type property_NumberProperty = z.infer<typeof property_NumberPropertySchema>
export type property_BooleanPropertyConfig = z.infer<typeof property_BooleanPropertyConfigSchema>
export type property_BooleanProperty = z.infer<typeof property_BooleanPropertySchema>
export type property_DateProperty = z.infer<typeof property_DatePropertySchema>
export type property_EnumPropertyOption = z.infer<typeof property_EnumPropertyOptionSchema>
export type property_EnumPropertySortBy = z.infer<typeof property_EnumPropertySortBySchema>
export type property_EnumPropertyConfig = z.infer<typeof property_EnumPropertyConfigSchema>
export type property_EnumProperty = z.infer<typeof property_EnumPropertySchema>
export type property_ReferencePropertyRelationship = z.infer<typeof property_ReferencePropertyRelationshipSchema>
export type property_ReferencePropertyConfig = z.infer<typeof property_ReferencePropertyConfigSchema>
export type property_ReferenceProperty = z.infer<typeof property_ReferencePropertySchema>
export type property_ReferenceListPropertyConfig = z.infer<typeof property_ReferenceListPropertyConfigSchema>
export type property_ReferenceListProperty = z.infer<typeof property_ReferenceListPropertySchema>
export type property_StringListProperty = z.infer<typeof property_StringListPropertySchema>
export type property_EnumListProperty = z.infer<typeof property_EnumListPropertySchema>
export type property_Property = z.infer<typeof property_PropertySchema>
export type versions_Version = z.infer<typeof versions_VersionSchema>
export type versions_VersionResponse = z.infer<typeof versions_VersionResponseSchema>
export type snapshots_SummarySection = z.infer<typeof snapshots_SummarySectionSchema>
export type snapshots_DiffEnumSchema = z.infer<typeof snapshots_SchemaDiffEnumSchema>
export type snapshots_DiffDataSchema = z.infer<typeof snapshots_SchemaDiffDataSchema>
export type snapshots_DiffRecordSchema = z.infer<typeof snapshots_SchemaDiffRecordSchema>
export type sheets_SheetAccess = z.infer<typeof sheets_SheetAccessSchema>
export type sheets_CompositeUniqueConstraintStrategy = z.infer<typeof sheets_CompositeUniqueConstraintStrategySchema>
export type sheets_CompositeUniqueConstraint = z.infer<typeof sheets_CompositeUniqueConstraintSchema>
export type sheets_ExternalSheetConstraint = z.infer<typeof sheets_ExternalSheetConstraintSchema>
export type sheets_SheetConstraint = z.infer<typeof sheets_SheetConstraintSchema>
export type sheets_SheetConfig = z.infer<typeof sheets_SheetConfigSchema>
export type snapshots_SnapshotSummary = z.infer<typeof snapshots_SnapshotSummarySchema>
export type snapshots_Snapshot = z.infer<typeof snapshots_SnapshotSchema>
export type snapshots_SnapshotResponse = z.infer<typeof snapshots_SnapshotResponseSchema>
export type snapshots_SnapshotsResponse = z.infer<typeof snapshots_SnapshotsResponseSchema>
export type snapshots_RestoreOptions = z.infer<typeof snapshots_RestoreOptionsSchema>
export type snapshots_ChangeType = z.infer<typeof snapshots_ChangeTypeSchema>
export type dataClips_SharedLinkAccess = z.infer<typeof dataClips_SharedLinkAccessSchema>
export type dataClips_CreateDataClipRequest = z.infer<typeof dataClips_CreateDataClipRequestSchema>
export type dataClips_AddRecordsToClipRequest = z.infer<typeof dataClips_AddRecordsToClipRequestSchema>
export type dataClips_UpdateDataClipRequest = z.infer<typeof dataClips_UpdateDataClipRequestSchema>
export type dataClips_DataClip = z.infer<typeof dataClips_DataClipSchema>
export type dataClips_DataClipResponse = z.infer<typeof dataClips_DataClipResponseSchema>
export type dataClips_ListDataClipResponse = z.infer<typeof dataClips_ListDataClipResponseSchema>
export type dataClips_ResolutionSummaryConflicts = z.infer<typeof dataClips_ResolutionSummaryConflictsSchema>
export type dataClips_ResolutionSummary = z.infer<typeof dataClips_ResolutionSummarySchema>
export type dataClips_ResolveType = z.infer<typeof dataClips_ResolveTypeSchema>
export type dataClips_ResolveTo = z.infer<typeof dataClips_ResolveToSchema>
export type dataClips_RemovedFromMainResolution = z.infer<typeof dataClips_RemovedFromMainResolutionSchema>
export type dataClips_Resolve = z.infer<typeof dataClips_ResolveSchema>
export type dataClips_ResolvedRecords = z.infer<typeof dataClips_ResolvedRecordsSchema>
export type dataClips_UpdateResolutionRequest = z.infer<typeof dataClips_UpdateResolutionRequestSchema>
export type dataClips_GetResolutionIndexResponse = z.infer<typeof dataClips_GetResolutionIndexResponseSchema>
export type records_ValidationType = z.infer<typeof records_ValidationTypeSchema>
export type records_ValidationSource = z.infer<typeof records_ValidationSourceSchema>
export type records_ValidationMessage = z.infer<typeof records_ValidationMessageSchema>
export type records_CellValueUnion = z.infer<typeof records_CellValueUnionSchema>
export type records_CellValue = z.infer<typeof records_CellValueSchema>
export type records_RecordData = z.infer<typeof records_RecordDataSchema>
export type records_CellConfig = z.infer<typeof records_CellConfigSchema>
export type records_RecordConfig = z.infer<typeof records_RecordConfigSchema>
export type records_RecordBase = z.infer<typeof records_RecordBaseSchema>
export type records_Record = z.infer<typeof records_RecordSchema>
export type records_Records = z.infer<typeof records_RecordsSchema>
export type records_CellValueWithLinks = z.infer<typeof records_CellValueWithLinksSchema>
export type records_RecordDataWithLinks = z.infer<typeof records_RecordDataWithLinksSchema>
export type records_RecordWithLinks = z.infer<typeof records_RecordWithLinksSchema>
export type records_RecordsWithLinks = z.infer<typeof records_RecordsWithLinksSchema>
export type records_FieldRecordCounts = z.infer<typeof records_FieldRecordCountsSchema>
export type records_RecordCounts = z.infer<typeof records_RecordCountsSchema>
export type records_RecordsResponseData = z.infer<typeof records_RecordsResponseDataSchema>
export type records_RecordsResponse = z.infer<typeof records_RecordsResponseSchema>
export type records_GetRecordsResponseData = z.infer<typeof records_GetRecordsResponseDataSchema>
export type records_GetRecordsResponse = z.infer<typeof records_GetRecordsResponseSchema>
export type records_RecordIndices = z.infer<typeof records_RecordIndicesSchema>
export type records_GetRecordIndicesResponse = z.infer<typeof records_GetRecordIndicesResponseSchema>
export type records_DiffValue = z.infer<typeof records_DiffValueSchema>
export type records_DiffData = z.infer<typeof records_DiffDataSchema>
export type records_DiffRecord = z.infer<typeof records_DiffRecordSchema>
export type records_DiffRecords = z.infer<typeof records_DiffRecordsSchema>
export type records_DiffRecordsResponse = z.infer<typeof records_DiffRecordsResponseSchema>
export type sheets_Sheet = z.infer<typeof sheets_SheetSchema>
export type sheets_ListSheetsResponse = z.infer<typeof sheets_ListSheetsResponseSchema>
export type sheets_SheetResponse = z.infer<typeof sheets_SheetResponseSchema>
export type sheets_SheetConfigUpdate = z.infer<typeof sheets_SheetConfigUpdateSchema>
export type sheets_SheetUpdate = z.infer<typeof sheets_SheetUpdateSchema>
export type sheets_SheetUpdateRequest = z.infer<typeof sheets_SheetUpdateRequestSchema>
export type sheets_SheetConfigOrUpdate = z.infer<typeof sheets_SheetConfigOrUpdateSchema>
export type sheets_RecordCountsResponseData = z.infer<typeof sheets_RecordCountsResponseDataSchema>
export type sheets_RecordCountsResponse = z.infer<typeof sheets_RecordCountsResponseSchema>
export type sheets_FieldConfigResponse = z.infer<typeof sheets_FieldConfigResponseSchema>
export type sheets_CellValueWithCounts = z.infer<typeof sheets_CellValueWithCountsSchema>
export type sheets_CellsResponseData = z.infer<typeof sheets_CellsResponseDataSchema>
export type sheets_CellsResponse = z.infer<typeof sheets_CellsResponseSchema>
export type sheets_FieldKey = z.infer<typeof sheets_FieldKeySchema>
export type sheets_Distinct = z.infer<typeof sheets_DistinctSchema>
export type sheets_IncludeCounts = z.infer<typeof sheets_IncludeCountsSchema>
export type sheets_CalculationType = z.infer<typeof sheets_CalculationTypeSchema>
export type sheets_Calculation = z.infer<typeof sheets_CalculationSchema>
export type sheets_CalculationResponse = z.infer<typeof sheets_CalculationResponseSchema>
export type sheets_ListCalculationsResponse = z.infer<typeof sheets_ListCalculationsResponseSchema>
export type commits_Commit = z.infer<typeof commits_CommitSchema>
export type commits_ListCommitsResponse = z.infer<typeof commits_ListCommitsResponseSchema>
export type commits_CommitResponse = z.infer<typeof commits_CommitResponseSchema>
export type workbooks_WorkbookConfigSettings = z.infer<typeof workbooks_WorkbookConfigSettingsSchema>
export type workbooks_WorkbookTreatments = z.infer<typeof workbooks_WorkbookTreatmentsSchema>
export type workbooks_Workbook = z.infer<typeof workbooks_WorkbookSchema>
export type workbooks_ListWorkbooksResponse = z.infer<typeof workbooks_ListWorkbooksResponseSchema>
export type workbooks_WorkbookResponse = z.infer<typeof workbooks_WorkbookResponseSchema>
export type workbooks_CreateWorkbookConfig = z.infer<typeof workbooks_CreateWorkbookConfigSchema>
export type workbooks_WorkbookUpdate = z.infer<typeof workbooks_WorkbookUpdateSchema>
export type runbooks_SheetTransformConfig = z.infer<typeof runbooks_SheetTransformConfigSchema>
export type runbooks_RunbookConfig = z.infer<typeof runbooks_RunbookConfigSchema>
export type runbooks_RunbookStatus = z.infer<typeof runbooks_RunbookStatusSchema>
export type runbooks_RunbookType = z.infer<typeof runbooks_RunbookTypeSchema>
export type runbooks_Runbook = z.infer<typeof runbooks_RunbookSchema>
export type runbooks_RunbooksResponse = z.infer<typeof runbooks_RunbooksResponseSchema>
export type runbooks_RunbookResponse = z.infer<typeof runbooks_RunbookResponseSchema>
export type runbooks_CreateRunbookRequest = z.infer<typeof runbooks_CreateRunbookRequestSchema>
export type runbooks_UpdateRunbookRequest = z.infer<typeof runbooks_UpdateRunbookRequestSchema>
export type auth_ApiCredentials = z.infer<typeof auth_ApiCredentialsSchema>
export type auth_AccessTokenResponse = z.infer<typeof auth_AccessTokenResponseSchema>
export type auth_ApiKeyId = z.infer<typeof auth_ApiKeyIdSchema>
export type auth_RawKey = z.infer<typeof auth_RawKeySchema>
export type auth_ApiKeyType = z.infer<typeof auth_ApiKeyTypeSchema>
export type auth_ApiKeyOperation = z.infer<typeof auth_ApiKeyOperationSchema>
export type auth_ApiKey = z.infer<typeof auth_ApiKeySchema>
export type auth_ApiKeysResponse = z.infer<typeof auth_ApiKeysResponseSchema>
export type auth_UserCredentials = z.infer<typeof auth_UserCredentialsSchema>
export type auth_Credentials = z.infer<typeof auth_CredentialsSchema>
export type auth_FronteggUserCredentials = z.infer<typeof auth_FronteggUserCredentialsSchema>
export type auth_SftpCredentials = z.infer<typeof auth_SftpCredentialsSchema>
export type auth_PersonalAccessTokenId = z.infer<typeof auth_PersonalAccessTokenIdSchema>
export type auth_PersonalAccessToken = z.infer<typeof auth_PersonalAccessTokenSchema>
export type auth_PersonalAccessTokensResponse = z.infer<typeof auth_PersonalAccessTokensResponseSchema>
export type auth_CreatePersonalAccessTokenResponseData = z.infer<
  typeof auth_CreatePersonalAccessTokenResponseDataSchema
>
export type auth_CreatePersonalAccessTokenResponse = z.infer<typeof auth_CreatePersonalAccessTokenResponseSchema>
export type events_Domain = z.infer<typeof events_DomainSchema>
export type events_EventContextSlugs = z.infer<typeof events_EventContextSlugsSchema>
export type events_ActionName = z.infer<typeof events_ActionNameSchema>
export type events_SheetSlug = z.infer<typeof events_SheetSlugSchema>
export type events_Context = z.infer<typeof events_ContextSchema>
export type events_Progress = z.infer<typeof events_ProgressSchema>
export type events_EventAttributes = z.infer<typeof events_EventAttributesSchema>
export type events_Origin = z.infer<typeof events_OriginSchema>
export type events_BaseEvent = z.infer<typeof events_BaseEventSchema>
export type events_GenericEvent = z.infer<typeof events_GenericEventSchema>
export type events_Event = z.infer<typeof events_EventSchema>
export type events_ListAllEventsResponse = z.infer<typeof events_ListAllEventsResponseSchema>
export type events_EventTopic = z.infer<typeof events_EventTopicSchema>
export type events_CreateEventConfig = z.infer<typeof events_CreateEventConfigSchema>
export type events_EventResponse = z.infer<typeof events_EventResponseSchema>
export type roles_RoleResponse = z.infer<typeof roles_RoleResponseSchema>
export type roles_ListRolesResponse = z.infer<typeof roles_ListRolesResponseSchema>
export type roles_ResourceIdUnion = z.infer<typeof roles_ResourceIdUnionSchema>
export type roles_ActorRoleResponse = z.infer<typeof roles_ActorRoleResponseSchema>
export type roles_ListActorRolesResponse = z.infer<typeof roles_ListActorRolesResponseSchema>
export type roles_AssignActorRoleRequest = z.infer<typeof roles_AssignActorRoleRequestSchema>
export type roles_AssignRoleResponseData = z.infer<typeof roles_AssignRoleResponseDataSchema>
export type roles_AssignRoleResponse = z.infer<typeof roles_AssignRoleResponseSchema>
export type agents_Compiler = z.infer<typeof agents_CompilerSchema>
export type agents_AgentConfig = z.infer<typeof agents_AgentConfigSchema>
export type agents_Agent = z.infer<typeof agents_AgentSchema>
export type agents_ListAgentsResponse = z.infer<typeof agents_ListAgentsResponseSchema>
export type agents_AgentResponse = z.infer<typeof agents_AgentResponseSchema>
export type agents_AgentVersion = z.infer<typeof agents_AgentVersionSchema>
export type agents_ListAgentVersionsResponse = z.infer<typeof agents_ListAgentVersionsResponseSchema>
export type agents_AgentVersionResponse = z.infer<typeof agents_AgentVersionResponseSchema>
export type agents_AgentStats = z.infer<typeof agents_AgentStatsSchema>
export type agents_EnvironmentStats = z.infer<typeof agents_EnvironmentStatsSchema>
export type agents_EnvironmentStatsResponse = z.infer<typeof agents_EnvironmentStatsResponseSchema>
export type agents_AgentLog = z.infer<typeof agents_AgentLogSchema>
export type agents_GetAgentLogsResponse = z.infer<typeof agents_GetAgentLogsResponseSchema>
export type agents_DetailedAgentLog = z.infer<typeof agents_DetailedAgentLogSchema>
export type agents_GetDetailedAgentLogResponse = z.infer<typeof agents_GetDetailedAgentLogResponseSchema>
export type agents_GetDetailedAgentLogsResponse = z.infer<typeof agents_GetDetailedAgentLogsResponseSchema>
export type agents_Execution = z.infer<typeof agents_ExecutionSchema>
export type agents_GetExecutionsResponse = z.infer<typeof agents_GetExecutionsResponseSchema>
export type environments_GuestAuthenticationEnum = z.infer<typeof environments_GuestAuthenticationEnumSchema>
export type environments_Environment = z.infer<typeof environments_EnvironmentSchema>
export type environments_ListEnvironmentsResponse = z.infer<typeof environments_ListEnvironmentsResponseSchema>
export type environments_EnvironmentResponse = z.infer<typeof environments_EnvironmentResponseSchema>
export type environments_EnvironmentConfigCreate = z.infer<typeof environments_EnvironmentConfigCreateSchema>
export type environments_EnvironmentConfigUpdate = z.infer<typeof environments_EnvironmentConfigUpdateSchema>
export type environments_GuideVersionResource = z.infer<typeof environments_GuideVersionResourceSchema>
export type environments_GuideResource = z.infer<typeof environments_GuideResourceSchema>
export type environments_GuideListResponse = z.infer<typeof environments_GuideListResponseSchema>
export type environments_GuideDetailResponse = z.infer<typeof environments_GuideDetailResponseSchema>
export type environments_GuideDeleteResponseData = z.infer<typeof environments_GuideDeleteResponseDataSchema>
export type environments_GuideDeleteResponse = z.infer<typeof environments_GuideDeleteResponseSchema>
export type environments_GuideUpdateRequest = z.infer<typeof environments_GuideUpdateRequestSchema>
export type environments_GuideCreateRequest = z.infer<typeof environments_GuideCreateRequestSchema>
export type environments_GuideVersionResponse = z.infer<typeof environments_GuideVersionResponseSchema>
export type environments_GuideVersionListResponse = z.infer<typeof environments_GuideVersionListResponseSchema>
export type spaces_SpaceDraft = z.infer<typeof spaces_SpaceDraftSchema>
export type spaces_SpaceDraftResponse = z.infer<typeof spaces_SpaceDraftResponseSchema>
export type spaces_SpaceDraftListResponse = z.infer<typeof spaces_SpaceDraftListResponseSchema>
export type spaces_SpaceSize = z.infer<typeof spaces_SpaceSizeSchema>
export type spaces_SpaceSidebarConfig = z.infer<typeof spaces_SpaceSidebarConfigSchema>
export type spaces_SpaceSettings = z.infer<typeof spaces_SpaceSettingsSchema>
export type spaces_SpaceAccess = z.infer<typeof spaces_SpaceAccessSchema>
export type spaces_InternalSpaceConfigBase = z.infer<typeof spaces_InternalSpaceConfigBaseSchema>
export type spaces_Space = z.infer<typeof spaces_SpaceSchema>
export type spaces_ListSpacesResponse = z.infer<typeof spaces_ListSpacesResponseSchema>
export type spaces_Activity = z.infer<typeof spaces_ActivitySchema>
export type spaces_ActivityResponse = z.infer<typeof spaces_ActivityResponseSchema>
export type spaces_SpaceResponse = z.infer<typeof spaces_SpaceResponseSchema>
export type spaces_SpaceConfig = z.infer<typeof spaces_SpaceConfigSchema>
export type spaces_UpgradeSpaceConfig = z.infer<typeof spaces_UpgradeSpaceConfigSchema>
export type spaces_EventToken = z.infer<typeof spaces_EventTokenSchema>
export type spaces_EventTokenResponse = z.infer<typeof spaces_EventTokenResponseSchema>
export type spaces_PubNubMessageAction = z.infer<typeof spaces_PubNubMessageActionSchema>
export type spaces_PubNubMessage = z.infer<typeof spaces_PubNubMessageSchema>
export type spaces_PubNubMessageHistoryResponse = z.infer<typeof spaces_PubNubMessageHistoryResponseSchema>
export type spaces_GetSpacesSortField = z.infer<typeof spaces_GetSpacesSortFieldSchema>
export type spaces_GetSpaceActvitySortField = z.infer<typeof spaces_GetSpaceActvitySortFieldSchema>
export type spaces_CreateConnectionLinkRequest = z.infer<typeof spaces_CreateConnectionLinkRequestSchema>
export type spaces_ConnectionLink = z.infer<typeof spaces_ConnectionLinkSchema>
export type spaces_CreateConnectionLinkResponse = z.infer<typeof spaces_CreateConnectionLinkResponseSchema>
export type spaces_AuditActivity = z.infer<typeof spaces_AuditActivitySchema>
export type spaces_TriggerEnum = z.infer<typeof spaces_TriggerEnumSchema>
export type spaces_TypeEnum = z.infer<typeof spaces_TypeEnumSchema>
export type spaces_RoleEnum = z.infer<typeof spaces_RoleEnumSchema>
export type spaces_GuidanceOptions = z.infer<typeof spaces_GuidanceOptionsSchema>
export type spaces_GuidanceResource = z.infer<typeof spaces_GuidanceResourceSchema>
export type spaces_GuidanceApiCreateData = z.infer<typeof spaces_GuidanceApiCreateDataSchema>
export type spaces_GuidanceApiUpdateData = z.infer<typeof spaces_GuidanceApiUpdateDataSchema>
export type spaces_GuidanceListResponse = z.infer<typeof spaces_GuidanceListResponseSchema>
export type secrets_SecretName = z.infer<typeof secrets_SecretNameSchema>
export type secrets_SecretValue = z.infer<typeof secrets_SecretValueSchema>
export type secrets_WriteSecret = z.infer<typeof secrets_WriteSecretSchema>
export type secrets_Secret = z.infer<typeof secrets_SecretSchema>
export type secrets_SecretsResponse = z.infer<typeof secrets_SecretsResponseSchema>
export type canvas_Canvas = z.infer<typeof canvas_CanvasSchema>
export type canvas_ListCanvasesResponse = z.infer<typeof canvas_ListCanvasesResponseSchema>
export type canvas_CanvasResponse = z.infer<typeof canvas_CanvasResponseSchema>
export type billing_StripePriceTier = z.infer<typeof billing_StripePriceTierSchema>
export type billing_StripePrice = z.infer<typeof billing_StripePriceSchema>
export type billing_StripeMetadata = z.infer<typeof billing_StripeMetadataSchema>
export type billing_Product = z.infer<typeof billing_ProductSchema>
export type billing_ProductsResponse = z.infer<typeof billing_ProductsResponseSchema>
export type billing_CheckoutSession = z.infer<typeof billing_CheckoutSessionSchema>
export type billing_CreateCheckoutSessionResponse = z.infer<typeof billing_CreateCheckoutSessionResponseSchema>
export type billing_LineItem = z.infer<typeof billing_LineItemSchema>
export type billing_CreateCheckoutSessionRequest = z.infer<typeof billing_CreateCheckoutSessionRequestSchema>
export type billing_SubscriptionUpdates = z.infer<typeof billing_SubscriptionUpdatesSchema>
export type billing_BillingSubscriptionItem = z.infer<typeof billing_BillingSubscriptionItemSchema>
export type billing_BillingSubscription = z.infer<typeof billing_BillingSubscriptionSchema>
export type billing_BillingSubscriptionsResponse = z.infer<typeof billing_BillingSubscriptionsResponseSchema>
export type billing_BillingSubscriptionResponse = z.infer<typeof billing_BillingSubscriptionResponseSchema>
export type billing_Price = z.infer<typeof billing_PriceSchema>
export type billing_BillingPlanWithUsage = z.infer<typeof billing_BillingPlanWithUsageSchema>
export type billing_BillingPlanWithUsageResponse = z.infer<typeof billing_BillingPlanWithUsageResponseSchema>
export type billing_BillingLimits = z.infer<typeof billing_BillingLimitsSchema>
export type billing_BillingLimitsResponse = z.infer<typeof billing_BillingLimitsResponseSchema>
export type messages_MessageRole = z.infer<typeof messages_MessageRoleSchema>
export type messages_MessageModel = z.infer<typeof messages_MessageModelSchema>
export type messages_MessageApiCreateData = z.infer<typeof messages_MessageApiCreateDataSchema>
export type messages_MessageApiUpdateData = z.infer<typeof messages_MessageApiUpdateDataSchema>
export type messages_MessageCollection = z.infer<typeof messages_MessageCollectionSchema>
export type documents_DocumentConfig = z.infer<typeof documents_DocumentConfigSchema>
export type documents_Document = z.infer<typeof documents_DocumentSchema>
export type documents_ListDocumentsResponse = z.infer<typeof documents_ListDocumentsResponseSchema>
export type documents_DocumentResponse = z.infer<typeof documents_DocumentResponseSchema>
export type agentExports_AgentExportType = z.infer<typeof agentExports_AgentExportTypeSchema>
export type agentExports_AgentExport = z.infer<typeof agentExports_AgentExportSchema>
export type agentExports_ListAgentExportsResponse = z.infer<typeof agentExports_ListAgentExportsResponseSchema>
export type agentExports_GetAgentExportResponse = z.infer<typeof agentExports_GetAgentExportResponseSchema>
export type users_UserConfig = z.infer<typeof users_UserConfigSchema>
export type users_User = z.infer<typeof users_UserSchema>
export type users_ListUsersResponse = z.infer<typeof users_ListUsersResponseSchema>
export type users_UserResponse = z.infer<typeof users_UserResponseSchema>
export type users_UserWithRoles = z.infer<typeof users_UserWithRolesSchema>
export type users_UserWithRolesResponse = z.infer<typeof users_UserWithRolesResponseSchema>
export type users_ListUsersSortField = z.infer<typeof users_ListUsersSortFieldSchema>
export type users_UserCreateAndInviteRequest = z.infer<typeof users_UserCreateAndInviteRequestSchema>
export type users_ApiToken = z.infer<typeof users_ApiTokenSchema>
export type users_ListApiTokensResponse = z.infer<typeof users_ListApiTokensResponseSchema>
export type users_ApiTokenResponse = z.infer<typeof users_ApiTokenResponseSchema>
export type users_ExchangeTokenData = z.infer<typeof users_ExchangeTokenDataSchema>
export type users_ExchangeTokenResponse = z.infer<typeof users_ExchangeTokenResponseSchema>
export type accounts_Account = z.infer<typeof accounts_AccountSchema>
export type accounts_AccountResponse = z.infer<typeof accounts_AccountResponseSchema>
export type accounts_AccountPatch = z.infer<typeof accounts_AccountPatchSchema>
export type webhook_StripeWebhookRequest = z.infer<typeof webhook_StripeWebhookRequestSchema>
export type webhook_StripeWebhook = z.infer<typeof webhook_StripeWebhookSchema>
export type guests_GuestWorkbook = z.infer<typeof guests_GuestWorkbookSchema>
export type guests_GuestSheet = z.infer<typeof guests_GuestSheetSchema>
export type guests_GuestSpace = z.infer<typeof guests_GuestSpaceSchema>
export type guests_GuestConfig = z.infer<typeof guests_GuestConfigSchema>
export type guests_Guest = z.infer<typeof guests_GuestSchema>
export type guests_ListGuestsResponse = z.infer<typeof guests_ListGuestsResponseSchema>
export type guests_CreateGuestResponse = z.infer<typeof guests_CreateGuestResponseSchema>
export type guests_GuestResponse = z.infer<typeof guests_GuestResponseSchema>
export type guests_GuestConfigUpdate = z.infer<typeof guests_GuestConfigUpdateSchema>
export type guests_Invite = z.infer<typeof guests_InviteSchema>
export type guests_GuestToken = z.infer<typeof guests_GuestTokenSchema>
export type guests_GuestTokenResponse = z.infer<typeof guests_GuestTokenResponseSchema>
export type canvasAreas_CanvasAreaLayout = z.infer<typeof canvasAreas_CanvasAreaLayoutSchema>
export type canvasAreas_CanvasAreaType = z.infer<typeof canvasAreas_CanvasAreaTypeSchema>
export type canvasAreas_CanvasAreaPosition = z.infer<typeof canvasAreas_CanvasAreaPositionSchema>
export type canvasAreas_CanvasAreaVisibility = z.infer<typeof canvasAreas_CanvasAreaVisibilitySchema>
export type canvasAreas_CanvasArea = z.infer<typeof canvasAreas_CanvasAreaSchema>
export type canvasAreas_ListCanvasAreasResponse = z.infer<typeof canvasAreas_ListCanvasAreasResponseSchema>
export type canvasAreas_CanvasAreaResponse = z.infer<typeof canvasAreas_CanvasAreaResponseSchema>
export type mapping_KeyAdoptionStrategy = z.infer<typeof mapping_KeyAdoptionStrategySchema>
export type mapping_FamilyConfig = z.infer<typeof mapping_FamilyConfigSchema>
export type mapping_Family = z.infer<typeof mapping_FamilySchema>
export type mapping_MappingRuleConfig = z.infer<typeof mapping_MappingRuleConfigSchema>
export type mapping_ProgramConfig = z.infer<typeof mapping_ProgramConfigSchema>
export type mapping_MappingRuleOrConfig = z.infer<typeof mapping_MappingRuleOrConfigSchema>
export type mapping_ProgramSummary = z.infer<typeof mapping_ProgramSummarySchema>
export type mapping_Program = z.infer<typeof mapping_ProgramSchema>
export type mapping_ProgramsResponse = z.infer<typeof mapping_ProgramsResponseSchema>
export type mapping_ProgramResponse = z.infer<typeof mapping_ProgramResponseSchema>
export type mapping_MappingRule = z.infer<typeof mapping_MappingRuleSchema>
export type mapping_CreateMappingRulesRequest = z.infer<typeof mapping_CreateMappingRulesRequestSchema>
export type mapping_UpdateMappingRulesRequest = z.infer<typeof mapping_UpdateMappingRulesRequestSchema>
export type mapping_MappingRuleResponse = z.infer<typeof mapping_MappingRuleResponseSchema>
export type mapping_MappingRulesResponse = z.infer<typeof mapping_MappingRulesResponseSchema>
export type mapping_GetFieldWeightsRequest = z.infer<typeof mapping_GetFieldWeightsRequestSchema>
export type mapping_GetEnumWeightsRequest = z.infer<typeof mapping_GetEnumWeightsRequestSchema>
export type mapping_SourceDestinationWeight = z.infer<typeof mapping_SourceDestinationWeightSchema>
export type mapping_SourceDestinationWeights = z.infer<typeof mapping_SourceDestinationWeightsSchema>
export type mapping_SourceDestinationWeightsResponse = z.infer<typeof mapping_SourceDestinationWeightsResponseSchema>
export type dataRetentionPolicies_DataRetentionPolicyEnum = z.infer<
  typeof dataRetentionPolicies_DataRetentionPolicyEnumSchema
>
export type dataRetentionPolicies_DataRetentionPolicyConfig = z.infer<
  typeof dataRetentionPolicies_DataRetentionPolicyConfigSchema
>
export type dataRetentionPolicies_DataRetentionPolicy = z.infer<typeof dataRetentionPolicies_DataRetentionPolicySchema>
export type dataRetentionPolicies_ListDataRetentionPoliciesResponse = z.infer<
  typeof dataRetentionPolicies_ListDataRetentionPoliciesResponseSchema
>
export type dataRetentionPolicies_DataRetentionPolicyResponse = z.infer<
  typeof dataRetentionPolicies_DataRetentionPolicyResponseSchema
>
export type jobs_JobType = z.infer<typeof jobs_JobTypeSchema>
export type jobs_JobSource = z.infer<typeof jobs_JobSourceSchema>
export type jobs_JobDestination = z.infer<typeof jobs_JobDestinationSchema>
export type jobs_DeleteRecordsJobConfig = z.infer<typeof jobs_DeleteRecordsJobConfigSchema>
export type jobs_Driver = z.infer<typeof jobs_DriverSchema>
export type jobs_FileJobConfig = z.infer<typeof jobs_FileJobConfigSchema>
export type jobs_PipelineJobConfig = z.infer<typeof jobs_PipelineJobConfigSchema>
export type jobs_ExportOptions = z.infer<typeof jobs_ExportOptionsSchema>
export type jobs_ExportJobConfig = z.infer<typeof jobs_ExportJobConfigSchema>
export type jobs_MutateJobConfig = z.infer<typeof jobs_MutateJobConfigSchema>
export type jobs_FindAndReplaceJobConfig = z.infer<typeof jobs_FindAndReplaceJobConfigSchema>
export type jobs_MappingProgramJobConfig = z.infer<typeof jobs_MappingProgramJobConfigSchema>
export type jobs_AiGenerateBlueprintJobConfig = z.infer<typeof jobs_AiGenerateBlueprintJobConfigSchema>
export type jobs_AiGenerateSampleDataJobConfig = z.infer<typeof jobs_AiGenerateSampleDataJobConfigSchema>
export type jobs_AiGenerateBlueprintConstraintsJobConfig = z.infer<
  typeof jobs_AiGenerateBlueprintConstraintsJobConfigSchema
>
export type jobs_AiGenerateConstraintJobConfig = z.infer<typeof jobs_AiGenerateConstraintJobConfigSchema>
export type jobs_AiRuleCreationJobConfig = z.infer<typeof jobs_AiRuleCreationJobConfigSchema>
export type jobs_CaptureRoutineJobConfig = z.infer<typeof jobs_CaptureRoutineJobConfigSchema>
export type jobs_RunRunbookJobConfig = z.infer<typeof jobs_RunRunbookJobConfigSchema>
export type jobs_MappingFromPreprocessingJobConfig = z.infer<typeof jobs_MappingFromPreprocessingJobConfigSchema>
export type jobs_EmptyObject = z.infer<typeof jobs_EmptyObjectSchema>
export type jobs_AddRecordsToDataClipJobConfig = z.infer<typeof jobs_AddRecordsToDataClipJobConfigSchema>
export type jobs_UpdateDataClipResolutionsJobConfig = z.infer<typeof jobs_UpdateDataClipResolutionsJobConfigSchema>
export type jobs_AgentExportJobConfig = z.infer<typeof jobs_AgentExportJobConfigSchema>
export type jobs_JobUpdateConfig = z.infer<typeof jobs_JobUpdateConfigSchema>
export type jobs_Trigger = z.infer<typeof jobs_TriggerSchema>
export type jobs_JobStatus = z.infer<typeof jobs_JobStatusSchema>
export type jobs_JobMode = z.infer<typeof jobs_JobModeSchema>
export type jobs_ResourceJobSubject = z.infer<typeof jobs_ResourceJobSubjectSchema>
export type jobs_CollectionJobSubject = z.infer<typeof jobs_CollectionJobSubjectSchema>
export type jobs_JobSubject = z.infer<typeof jobs_JobSubjectSchema>
export type jobs_JobPartExecution = z.infer<typeof jobs_JobPartExecutionSchema>
export type jobs_JobConfig = z.infer<typeof jobs_JobConfigSchema>
export type jobs_Job = z.infer<typeof jobs_JobSchema>
export type jobs_ListJobsResponse = z.infer<typeof jobs_ListJobsResponseSchema>
export type jobs_JobResponse = z.infer<typeof jobs_JobResponseSchema>
export type jobs_EnumValue = z.infer<typeof jobs_EnumValueSchema>
export type jobs_CategoryMapping = z.infer<typeof jobs_CategoryMappingSchema>
export type jobs_EnumDetails = z.infer<typeof jobs_EnumDetailsSchema>
export type jobs_Certainty = z.infer<typeof jobs_CertaintySchema>
export type jobs_Metadata = z.infer<typeof jobs_MetadataSchema>
export type jobs_Edge = z.infer<typeof jobs_EdgeSchema>
export type jobs_SourceField = z.infer<typeof jobs_SourceFieldSchema>
export type jobs_DestinationField = z.infer<typeof jobs_DestinationFieldSchema>
export type jobs_JobExecutionPlan = z.infer<typeof jobs_JobExecutionPlanSchema>
export type jobs_JobPlan = z.infer<typeof jobs_JobPlanSchema>
export type jobs_JobPlanResponse = z.infer<typeof jobs_JobPlanResponseSchema>
export type jobs_JobUpdate = z.infer<typeof jobs_JobUpdateSchema>
export type jobs_TransformationProgramJobConfig = z.infer<typeof jobs_TransformationProgramJobConfigSchema>
export type jobs_JobSubjectType = z.infer<typeof jobs_JobSubjectTypeSchema>
export type jobs_JobPlanObject = z.infer<typeof jobs_JobPlanObjectSchema>
export type jobs_JobExecutionPlanRequest = z.infer<typeof jobs_JobExecutionPlanRequestSchema>
export type jobs_JobExecutionPlanConfig = z.infer<typeof jobs_JobExecutionPlanConfigSchema>
export type jobs_JobExecutionPlanConfigRequest = z.infer<typeof jobs_JobExecutionPlanConfigRequestSchema>
export type jobs_JobAckDetails = z.infer<typeof jobs_JobAckDetailsSchema>
export type jobs_JobOutcomeTriggerType = z.infer<typeof jobs_JobOutcomeTriggerTypeSchema>
export type jobs_JobOutcomeTriggerAudience = z.infer<typeof jobs_JobOutcomeTriggerAudienceSchema>
export type jobs_JobOutcomeTriggerDetails = z.infer<typeof jobs_JobOutcomeTriggerDetailsSchema>
export type jobs_JobOutcomeTrigger = z.infer<typeof jobs_JobOutcomeTriggerSchema>
export type jobs_JobOutcomeNextId = z.infer<typeof jobs_JobOutcomeNextIdSchema>
export type jobs_JobOutcomeNextUrl = z.infer<typeof jobs_JobOutcomeNextUrlSchema>
export type jobs_JobOutcomeNextDownload = z.infer<typeof jobs_JobOutcomeNextDownloadSchema>
export type jobs_JobOutcomeNextFileObject = z.infer<typeof jobs_JobOutcomeNextFileObjectSchema>
export type jobs_JobOutcomeNextFiles = z.infer<typeof jobs_JobOutcomeNextFilesSchema>
export type jobs_JobOutcomeNextWait = z.infer<typeof jobs_JobOutcomeNextWaitSchema>
export type jobs_JobOutcomeNextSnapshot = z.infer<typeof jobs_JobOutcomeNextSnapshotSchema>
export type jobs_JobOutcomeNextRetry = z.infer<typeof jobs_JobOutcomeNextRetrySchema>
export type jobs_JobOutcomeNextView = z.infer<typeof jobs_JobOutcomeNextViewSchema>
export type jobs_JobOutcomeNext = z.infer<typeof jobs_JobOutcomeNextSchema>
export type jobs_JobOutcome = z.infer<typeof jobs_JobOutcomeSchema>
export type jobs_JobCompleteDetails = z.infer<typeof jobs_JobCompleteDetailsSchema>
export type jobs_JobCancelDetails = z.infer<typeof jobs_JobCancelDetailsSchema>
export type jobs_JobPartsArray = z.infer<typeof jobs_JobPartsArraySchema>
export type jobs_JobParts = z.infer<typeof jobs_JobPartsSchema>
export type jobs_JobSplitDetails = z.infer<typeof jobs_JobSplitDetailsSchema>
export type views_ViewConfig = z.infer<typeof views_ViewConfigSchema>
export type views_View = z.infer<typeof views_ViewSchema>
export type views_ListViewsResponse = z.infer<typeof views_ListViewsResponseSchema>
export type views_ViewResponse = z.infer<typeof views_ViewResponseSchema>
export type views_ViewCreate = z.infer<typeof views_ViewCreateSchema>
export type views_ViewUpdate = z.infer<typeof views_ViewUpdateSchema>
export type files_ModelFileStatusEnum = z.infer<typeof files_ModelFileStatusEnumSchema>
export type files_Mode = z.infer<typeof files_ModeSchema>
export type files_FileOrigin = z.infer<typeof files_FileOriginSchema>
export type files_File = z.infer<typeof files_FileSchema>
export type files_ListFilesResponse = z.infer<typeof files_ListFilesResponseSchema>
export type files_FileResponse = z.infer<typeof files_FileResponseSchema>
export type frontegg_FronteggUserRequest = z.infer<typeof frontegg_FronteggUserRequestSchema>
export type foreigndb_UploadToObjectStorageRequest = z.infer<typeof foreigndb_UploadToObjectStorageRequestSchema>
export type foreigndb_RestoreDatabaseRequest = z.infer<typeof foreigndb_RestoreDatabaseRequestSchema>
export type foreigndb_RestoreDatabaseResponse = z.infer<typeof foreigndb_RestoreDatabaseResponseSchema>
export type foreigndb_DatabaseTask = z.infer<typeof foreigndb_DatabaseTaskSchema>
export type foreigndb_GetDatabaseResponse = z.infer<typeof foreigndb_GetDatabaseResponseSchema>
export type foreigndb_GetDatabaseUserResponse = z.infer<typeof foreigndb_GetDatabaseUserResponseSchema>
export type assistant_GenerateMutationConfig = z.infer<typeof assistant_GenerateMutationConfigSchema>
export type assistant_GeneratedMutationMetadata = z.infer<typeof assistant_GeneratedMutationMetadataSchema>
export type assistant_GeneratedMutation = z.infer<typeof assistant_GeneratedMutationSchema>
export type assistant_GeneratedMutationResponse = z.infer<typeof assistant_GeneratedMutationResponseSchema>
export type assistant_GenerateQueryConfig = z.infer<typeof assistant_GenerateQueryConfigSchema>
export type assistant_GeneratedQueryMetadata = z.infer<typeof assistant_GeneratedQueryMetadataSchema>
export type assistant_GeneratedQuery = z.infer<typeof assistant_GeneratedQuerySchema>
export type assistant_GeneratedQueryResponse = z.infer<typeof assistant_GeneratedQueryResponseSchema>
export type assistant_PromptTypeEnum = z.infer<typeof assistant_PromptTypeEnumSchema>
export type assistant_Prompt = z.infer<typeof assistant_PromptSchema>
export type assistant_PromptsResponse = z.infer<typeof assistant_PromptsResponseSchema>
export type assistant_PromptResponse = z.infer<typeof assistant_PromptResponseSchema>
export type assistant_PromptPatch = z.infer<typeof assistant_PromptPatchSchema>
export type assistant_PromptCreate = z.infer<typeof assistant_PromptCreateSchema>
export type assistant_PromptTypeQueryEnum = z.infer<typeof assistant_PromptTypeQueryEnumSchema>
export type cells_CellValueWithCountsDeprecated = z.infer<typeof cells_CellValueWithCountsDeprecatedSchema>
export type cells_CellsResponseDataDeprecated = z.infer<typeof cells_CellsResponseDataDeprecatedSchema>
export type cells_CellsResponseDeprecated = z.infer<typeof cells_CellsResponseDeprecatedSchema>
export type cells_FieldKeyDeprecated = z.infer<typeof cells_FieldKeyDeprecatedSchema>
export type cells_DistinctDeprecated = z.infer<typeof cells_DistinctDeprecatedSchema>
export type cells_IncludeCountsDeprecated = z.infer<typeof cells_IncludeCountsDeprecatedSchema>
export type entitlements_Entitlement = z.infer<typeof entitlements_EntitlementSchema>
export type entitlements_ListEntitlementsResponse = z.infer<typeof entitlements_ListEntitlementsResponseSchema>
export type apps_AppType = z.infer<typeof apps_AppTypeSchema>
export type apps_App = z.infer<typeof apps_AppSchema>
export type apps_AppsResponse = z.infer<typeof apps_AppsResponseSchema>
export type apps_AppResponse = z.infer<typeof apps_AppResponseSchema>
export type apps_AppAutobuildType = z.infer<typeof apps_AppAutobuildTypeSchema>
export type apps_AppAutobuild = z.infer<typeof apps_AppAutobuildSchema>
export type apps_AppAutobuildResponse = z.infer<typeof apps_AppAutobuildResponseSchema>
export type apps_AppPatch = z.infer<typeof apps_AppPatchSchema>
export type apps_AppCreate = z.infer<typeof apps_AppCreateSchema>
export type apps_EnvironmentFilterType = z.infer<typeof apps_EnvironmentFilterTypeSchema>
export type apps_EnvironmentFilters = z.infer<typeof apps_EnvironmentFiltersSchema>
export type apps_SuccessResponse = z.infer<typeof apps_SuccessResponseSchema>
export type apps_ConstraintResource = z.infer<typeof apps_ConstraintResourceSchema>
export type apps_ConstraintsResponse = z.infer<typeof apps_ConstraintsResponseSchema>
export type apps_ConstraintResponse = z.infer<typeof apps_ConstraintResponseSchema>
export type apps_ConstraintVersionResource = z.infer<typeof apps_ConstraintVersionResourceSchema>
export type apps_ConstraintVersionsResponse = z.infer<typeof apps_ConstraintVersionsResponseSchema>
export type apps_ConstraintVersionResponse = z.infer<typeof apps_ConstraintVersionResponseSchema>
export type apps_ConstraintCreate = z.infer<typeof apps_ConstraintCreateSchema>
export type apps_ConstraintUpdate = z.infer<typeof apps_ConstraintUpdateSchema>
export type actions_APIActionConfigs = z.infer<typeof actions_APIActionConfigsSchema>
export type actions_APIActionResponse = z.infer<typeof actions_APIActionResponseSchema>
export type actions_APIActionsResponse = z.infer<typeof actions_APIActionsResponseSchema>
export type threads_ThreadStatus = z.infer<typeof threads_ThreadStatusSchema>
export type threads_StateUpdateStrategy = z.infer<typeof threads_StateUpdateStrategySchema>
export type threads_ThreadMetadata = z.infer<typeof threads_ThreadMetadataSchema>
export type threads_ThreadState = z.infer<typeof threads_ThreadStateSchema>
export type threads_ThreadModel = z.infer<typeof threads_ThreadModelSchema>
export type threads_ThreadApiCreateData = z.infer<typeof threads_ThreadApiCreateDataSchema>
export type threads_ThreadApiUpdateData = z.infer<typeof threads_ThreadApiUpdateDataSchema>
export type threads_ThreadCollection = z.infer<typeof threads_ThreadCollectionSchema>
export type threads_ThreadResponse = z.infer<typeof threads_ThreadResponseSchema>
export type health_HealthSuccessEnum = z.infer<typeof health_HealthSuccessEnumSchema>
export type health_HealthResponse = z.infer<typeof health_HealthResponseSchema>
export type health_AppVersionResponse = z.infer<typeof health_AppVersionResponseSchema>
export type routines_RoutineType = z.infer<typeof routines_RoutineTypeSchema>
export type routines_Routine = z.infer<typeof routines_RoutineSchema>
export type routines_RoutinesResponse = z.infer<typeof routines_RoutinesResponseSchema>
export type routines_RoutineResponse = z.infer<typeof routines_RoutineResponseSchema>
export type routines_CreateRoutineRequest = z.infer<typeof routines_CreateRoutineRequestSchema>
export type routines_UpdateRoutineRequest = z.infer<typeof routines_UpdateRoutineRequestSchema>
