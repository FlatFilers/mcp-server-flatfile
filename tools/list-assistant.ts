/**
 * This file was generated. Do NOT edit this file.
 */

import fetch from 'node-fetch'
import { type ZodRawShape, z } from 'zod'
import { assistant_PromptTypeQueryEnumSchema } from '../schemas.js'
import type { Tool } from './index.js'

const params = {
  promptType: assistant_PromptTypeQueryEnumSchema.optional().describe('Type of prompt (default AI_ASSIST)'),
  pageSize: z.number().int().optional().describe('Number of prompts to return in a page (default 7)'),
  pageNumber: z.number().int().optional().describe('Based on pageSize, which page of prompts to return'),
} as ZodRawShape

export const listAssistant: Tool<typeof params> = {
  name: 'listAssistant',
  description: 'List prompts: Returns prompts created by user',
  params,
  cb: async ({ promptType, pageSize, pageNumber }) => {
    try {
      const searchParams = { promptType, pageSize, pageNumber }

      const searchParamsString = new URLSearchParams(JSON.parse(JSON.stringify(searchParams))).toString()
      const baseUrl = process.env.FLATFILE_API_URL || 'https://platform.flatfile.com/api/v1'
      const url = `${baseUrl}//prompts${searchParamsString ? `?${searchParamsString}` : ''}`

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'X-Disable-Hooks': 'true',
          Authorization: `Bearer ${process.env.FLATFILE_BEARER_TOKEN}`,
          'Content-Type': 'application/json',
        },
      })

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`)
      }

      const data = (await response.json()) as { data: unknown }

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(data.data, null, 2),
          },
        ],
        status: 'success',
      }
    } catch (error) {
      return {
        content: [{ type: 'text', text: `Error: ${error}` }],
        status: 'failed',
      }
    }
  },
}
