/**
 * This file was generated. Do NOT edit this file.
 */

import fetch from 'node-fetch'
import { type ZodRawShape, z } from 'zod'
import { commons_EnvironmentIdSchema, commons_SpaceIdSchema } from '../schemas.js'
import type { Tool } from './index.js'

const params = {
  environmentId: commons_EnvironmentIdSchema.optional().describe('Filter by environment'),
  spaceId: commons_SpaceIdSchema.optional().describe('Filter by space'),
  domain: z.string().optional().describe('Filter by event domain'),
  topic: z.string().optional().describe('Filter by event topic'),
  since: z.string().optional().describe('Filter by event timestamp'),
  pageSize: z.number().int().optional().describe('Number of results to return in a page (default 10)'),
  pageNumber: z.number().int().optional().describe('Based on pageSize, which page of results to return'),
  includeAcknowledged: z.boolean().optional().describe('Include acknowledged events'),
} as ZodRawShape

export const listEvents: Tool<typeof params> = {
  name: 'listEvents',
  description: 'List events: Event topics that the Flatfile Platform emits.',
  params,
  cb: async ({ environmentId, spaceId, domain, topic, since, pageSize, pageNumber, includeAcknowledged }) => {
    try {
      const searchParams = { environmentId, spaceId, domain, topic, since, pageSize, pageNumber, includeAcknowledged }

      const searchParamsString = new URLSearchParams(JSON.parse(JSON.stringify(searchParams))).toString()
      const baseUrl = process.env.FLATFILE_API_URL || 'https://platform.flatfile.com/api/v1'
      const url = `${baseUrl}/events${searchParamsString ? `?${searchParamsString}` : ''}`

      const response = await fetch(url, {
        method: 'GET',
        headers: {
          'X-Disable-Hooks': 'true',
          Authorization: `Bearer ${process.env.FLATFILE_BEARER_TOKEN}`,
          'Content-Type': 'application/json',
        },
      })

      if (!response.ok) {
        throw new Error(`HTTP error! Status: ${response.status} - ${response.statusText}`)
      }

      const data = (await response.json()) as { data: unknown }

      return {
        content: [
          {
            type: 'text',
            text: JSON.stringify(data.data, null, 2),
          },
        ],
        status: 'success',
      }
    } catch (error) {
      return {
        content: [{ type: 'text', text: `Error: ${error}` }],
        status: 'failed',
      }
    }
  },
}
